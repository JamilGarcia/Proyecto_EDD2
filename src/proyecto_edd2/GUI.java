/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto_edd2;

import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.Scanner;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author User
 */
public class GUI extends javax.swing.JFrame {

    ArrayList<Archivo> Lista_Archivos = new ArrayList();
    Archivo archivo_actual;// Objeto para identificar archivo actual

    public GUI() {
        initComponents();
        jl_nombre_archivo.setVisible(false);
        //Cargar Archivos a la lista de archivos
        File directoryPath = new File("./");
        //List text files only
        File[] files = directoryPath.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".txt");
            }
        });

        for (File file : files) {
            Archivo archivo_temp = new Archivo(file.getAbsolutePath());
            Lista_Archivos.add(archivo_temp);
            Lista_Archivos.get(Lista_Archivos.indexOf(archivo_temp)).setNombre_archivo(file.getName());//Asignar los nombres de archivo
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jd_crearCampo = new javax.swing.JDialog();
        jP_crearCampo = new javax.swing.JPanel();
        jl_CrearCampo = new javax.swing.JLabel();
        jl_NombredeCampo = new javax.swing.JLabel();
        jt_nombreCampo = new javax.swing.JTextField();
        jl_TipodeDato = new javax.swing.JLabel();
        cb_tipoCampo = new javax.swing.JComboBox<>();
        jl_Longitud = new javax.swing.JLabel();
        js_longitud = new javax.swing.JSpinner();
        jb_crearCampo = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jr_llaveSi = new javax.swing.JRadioButton();
        jr_llaveNo = new javax.swing.JRadioButton();
        jb_modCampo = new javax.swing.JButton();
        jd_abrirArchivo = new javax.swing.JDialog();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jT_Archivos = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jb_abrirArchivo = new javax.swing.JButton();
        jb_salirAbrirArchivo = new javax.swing.JButton();
        BgLlavePrimaria = new javax.swing.ButtonGroup();
        jd_introducirRegistro = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        jl_introRegistro = new javax.swing.JLabel();
        tf_introducirRegistro = new javax.swing.JTextField();
        b_introducirRegistro = new javax.swing.JButton();
        jd_modificarRegistro = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tf_modificarRegistro = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jd_buscarRegistro = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jl_nombre_archivo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTP_Menus = new javax.swing.JTabbedPane();
        jP_menuArchivo = new javax.swing.JPanel();
        B_Nuevo_Arch = new javax.swing.JButton();
        B_Abrir_Arch = new javax.swing.JButton();
        B_Salvar_Arch = new javax.swing.JButton();
        B_Cerrar_Arch = new javax.swing.JButton();
        B_Salir = new javax.swing.JButton();
        jp_Campos = new javax.swing.JPanel();
        B_Crear_Campo = new javax.swing.JButton();
        B_Listar_Campo = new javax.swing.JButton();
        B_Mod_Campo = new javax.swing.JButton();
        B_Borrar_Campo = new javax.swing.JButton();
        jP_tabla_ListarCampos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_ListarCampos = new javax.swing.JTable();
        jl_tituloCampos = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        B_Intro_Regis = new javax.swing.JButton();
        B_Modi_Regis = new javax.swing.JButton();
        B_Buscar_Regis = new javax.swing.JButton();
        B_Borrar_Regis = new javax.swing.JButton();
        B_Listar_Regis = new javax.swing.JButton();
        jp_Registro = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jt_Registro = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        B_Expor_Excel = new javax.swing.JButton();
        B_Expo_XML = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        B_Crear_Arch = new javax.swing.JButton();
        B_ReIndex_Arch = new javax.swing.JButton();

        jd_crearCampo.setTitle("Crear Campo");

        jl_CrearCampo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jl_CrearCampo.setText("Crear Campo");

        jl_NombredeCampo.setText("Nombre de campo:");

        jt_nombreCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jt_nombreCampoActionPerformed(evt);
            }
        });

        jl_TipodeDato.setText("Tipo de dato:");

        cb_tipoCampo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----", "String", "Int", "Double", "Float", "Char", "" }));

        jl_Longitud.setText("Longitud:");

        js_longitud.setModel(new javax.swing.SpinnerNumberModel(0, 0, 30, 1));

        jb_crearCampo.setText("Crear Campo");
        jb_crearCampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_crearCampoMouseClicked(evt);
            }
        });

        jLabel10.setText("Es llave primaria:");

        BgLlavePrimaria.add(jr_llaveSi);
        jr_llaveSi.setText("Si ");

        BgLlavePrimaria.add(jr_llaveNo);
        jr_llaveNo.setText("No");

        jb_modCampo.setText("Modificar Campo");
        jb_modCampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_modCampoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jP_crearCampoLayout = new javax.swing.GroupLayout(jP_crearCampo);
        jP_crearCampo.setLayout(jP_crearCampoLayout);
        jP_crearCampoLayout.setHorizontalGroup(
            jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_crearCampoLayout.createSequentialGroup()
                .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jP_crearCampoLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jl_NombredeCampo)
                            .addComponent(jl_TipodeDato))
                        .addGap(18, 18, 18)
                        .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cb_tipoCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jt_nombreCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(87, 87, 87)
                        .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jP_crearCampoLayout.createSequentialGroup()
                                .addComponent(jl_Longitud)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(js_longitud, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jP_crearCampoLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(jr_llaveSi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jr_llaveNo))))
                    .addGroup(jP_crearCampoLayout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jb_crearCampo)
                        .addGap(54, 54, 54)
                        .addComponent(jb_modCampo)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_crearCampoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jl_CrearCampo)
                .addGap(248, 248, 248))
        );
        jP_crearCampoLayout.setVerticalGroup(
            jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_crearCampoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jl_CrearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jt_nombreCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_NombredeCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_Longitud)
                    .addComponent(js_longitud, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jP_crearCampoLayout.createSequentialGroup()
                        .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jl_TipodeDato)
                            .addComponent(cb_tipoCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 54, 54)
                        .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jb_crearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jb_modCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(jr_llaveSi)
                        .addComponent(jr_llaveNo)))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout jd_crearCampoLayout = new javax.swing.GroupLayout(jd_crearCampo.getContentPane());
        jd_crearCampo.getContentPane().setLayout(jd_crearCampoLayout);
        jd_crearCampoLayout.setHorizontalGroup(
            jd_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_crearCampoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jP_crearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jd_crearCampoLayout.setVerticalGroup(
            jd_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_crearCampoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jP_crearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Archivos");
        jT_Archivos.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jT_Archivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_ArchivosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jT_Archivos);

        jLabel1.setText("File Manager");

        jb_abrirArchivo.setText("Abrir");
        jb_abrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_abrirArchivoActionPerformed(evt);
            }
        });

        jb_salirAbrirArchivo.setText("Salir");
        jb_salirAbrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_salirAbrirArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jb_abrirArchivo)
                            .addComponent(jb_salirAbrirArchivo))))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jb_abrirArchivo)
                        .addGap(18, 18, 18)
                        .addComponent(jb_salirAbrirArchivo)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jd_abrirArchivoLayout = new javax.swing.GroupLayout(jd_abrirArchivo.getContentPane());
        jd_abrirArchivo.getContentPane().setLayout(jd_abrirArchivoLayout);
        jd_abrirArchivoLayout.setHorizontalGroup(
            jd_abrirArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jd_abrirArchivoLayout.setVerticalGroup(
            jd_abrirArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jd_introducirRegistro.setMaximumSize(new java.awt.Dimension(260, 210));
        jd_introducirRegistro.setMinimumSize(new java.awt.Dimension(260, 210));
        jd_introducirRegistro.setPreferredSize(new java.awt.Dimension(260, 210));
        jd_introducirRegistro.setResizable(false);

        jLabel3.setText("Introducir Registro");

        jl_introRegistro.setText("jLabel4");

        b_introducirRegistro.setText("Listo");
        b_introducirRegistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_introducirRegistroMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_introducirRegistroLayout = new javax.swing.GroupLayout(jd_introducirRegistro.getContentPane());
        jd_introducirRegistro.getContentPane().setLayout(jd_introducirRegistroLayout);
        jd_introducirRegistroLayout.setHorizontalGroup(
            jd_introducirRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_introducirRegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jd_introducirRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(b_introducirRegistro)
                    .addGroup(jd_introducirRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tf_introducirRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)
                        .addComponent(jl_introRegistro)))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jd_introducirRegistroLayout.setVerticalGroup(
            jd_introducirRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_introducirRegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jl_introRegistro)
                .addGap(18, 18, 18)
                .addComponent(tf_introducirRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(b_introducirRegistro)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        jd_modificarRegistro.setMaximumSize(new java.awt.Dimension(501, 320));
        jd_modificarRegistro.setMinimumSize(new java.awt.Dimension(501, 320));
        jd_modificarRegistro.setResizable(false);

        jLabel4.setText("Modificar Registro");

        jLabel5.setText("jLabel5");

        jButton1.setText("Listo");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_modificarRegistroLayout = new javax.swing.GroupLayout(jd_modificarRegistro.getContentPane());
        jd_modificarRegistro.getContentPane().setLayout(jd_modificarRegistroLayout);
        jd_modificarRegistroLayout.setHorizontalGroup(
            jd_modificarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_modificarRegistroLayout.createSequentialGroup()
                .addGroup(jd_modificarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_modificarRegistroLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jd_modificarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(tf_modificarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jd_modificarRegistroLayout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        jd_modificarRegistroLayout.setVerticalGroup(
            jd_modificarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_modificarRegistroLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(35, 35, 35)
                .addComponent(tf_modificarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jButton1)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jd_buscarRegistroLayout = new javax.swing.GroupLayout(jd_buscarRegistro.getContentPane());
        jd_buscarRegistro.getContentPane().setLayout(jd_buscarRegistroLayout);
        jd_buscarRegistroLayout.setHorizontalGroup(
            jd_buscarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jd_buscarRegistroLayout.setVerticalGroup(
            jd_buscarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jl_nombre_archivo.setText("jlabel");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel2.setText("Standard File Manager");

        jTP_Menus.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTP_MenusStateChanged(evt);
            }
        });

        B_Nuevo_Arch.setText("Nuevo Archivo");
        B_Nuevo_Arch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_Nuevo_ArchActionPerformed(evt);
            }
        });

        B_Abrir_Arch.setText("Abrir Archivo");
        B_Abrir_Arch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_Abrir_ArchActionPerformed(evt);
            }
        });

        B_Salvar_Arch.setText("Salvar Archivo");
        B_Salvar_Arch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_Salvar_ArchActionPerformed(evt);
            }
        });

        B_Cerrar_Arch.setText("Cerrar Archivo");
        B_Cerrar_Arch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_Cerrar_ArchActionPerformed(evt);
            }
        });

        B_Salir.setText("Salir");
        B_Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_SalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jP_menuArchivoLayout = new javax.swing.GroupLayout(jP_menuArchivo);
        jP_menuArchivo.setLayout(jP_menuArchivoLayout);
        jP_menuArchivoLayout.setHorizontalGroup(
            jP_menuArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_menuArchivoLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jP_menuArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(B_Salir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(B_Nuevo_Arch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(B_Abrir_Arch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(B_Salvar_Arch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(B_Cerrar_Arch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(497, Short.MAX_VALUE))
        );
        jP_menuArchivoLayout.setVerticalGroup(
            jP_menuArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_menuArchivoLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(B_Nuevo_Arch)
                .addGap(44, 44, 44)
                .addComponent(B_Abrir_Arch)
                .addGap(42, 42, 42)
                .addComponent(B_Salvar_Arch)
                .addGap(37, 37, 37)
                .addComponent(B_Cerrar_Arch)
                .addGap(37, 37, 37)
                .addComponent(B_Salir)
                .addContainerGap(226, Short.MAX_VALUE))
        );

        jTP_Menus.addTab("Archivo", jP_menuArchivo);

        B_Crear_Campo.setText("Crear Campo");
        B_Crear_Campo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Crear_CampoMouseClicked(evt);
            }
        });

        B_Listar_Campo.setText("Listar Campos");
        B_Listar_Campo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Listar_CampoMouseClicked(evt);
            }
        });

        B_Mod_Campo.setText("Modificar Campo");
        B_Mod_Campo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Mod_CampoMouseClicked(evt);
            }
        });

        B_Borrar_Campo.setText("Borrar Campo");
        B_Borrar_Campo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Borrar_CampoMouseClicked(evt);
            }
        });

        table_ListarCampos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo de Dato", "Longitud", "Es llave primaria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_ListarCampos);

        jl_tituloCampos.setText("Campo");

        javax.swing.GroupLayout jP_tabla_ListarCamposLayout = new javax.swing.GroupLayout(jP_tabla_ListarCampos);
        jP_tabla_ListarCampos.setLayout(jP_tabla_ListarCamposLayout);
        jP_tabla_ListarCamposLayout.setHorizontalGroup(
            jP_tabla_ListarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_tabla_ListarCamposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jP_tabla_ListarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jP_tabla_ListarCamposLayout.createSequentialGroup()
                        .addComponent(jl_tituloCampos)
                        .addContainerGap(382, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        jP_tabla_ListarCamposLayout.setVerticalGroup(
            jP_tabla_ListarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_tabla_ListarCamposLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jl_tituloCampos)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout jp_CamposLayout = new javax.swing.GroupLayout(jp_Campos);
        jp_Campos.setLayout(jp_CamposLayout);
        jp_CamposLayout.setHorizontalGroup(
            jp_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_CamposLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jp_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(B_Borrar_Campo)
                    .addComponent(B_Mod_Campo)
                    .addComponent(B_Listar_Campo)
                    .addComponent(B_Crear_Campo))
                .addContainerGap(489, Short.MAX_VALUE))
            .addGroup(jp_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp_CamposLayout.createSequentialGroup()
                    .addContainerGap(208, Short.MAX_VALUE)
                    .addComponent(jP_tabla_ListarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        jp_CamposLayout.setVerticalGroup(
            jp_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_CamposLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(B_Crear_Campo)
                .addGap(47, 47, 47)
                .addComponent(B_Listar_Campo)
                .addGap(47, 47, 47)
                .addComponent(B_Mod_Campo)
                .addGap(44, 44, 44)
                .addComponent(B_Borrar_Campo)
                .addContainerGap(277, Short.MAX_VALUE))
            .addGroup(jp_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp_CamposLayout.createSequentialGroup()
                    .addContainerGap(9, Short.MAX_VALUE)
                    .addComponent(jP_tabla_ListarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(207, Short.MAX_VALUE)))
        );

        jTP_Menus.addTab("Campos", jp_Campos);

        B_Intro_Regis.setText("Introducir Registros");
        B_Intro_Regis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Intro_RegisMouseClicked(evt);
            }
        });

        B_Modi_Regis.setText("Modificar Registros");
        B_Modi_Regis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Modi_RegisMouseClicked(evt);
            }
        });

        B_Buscar_Regis.setText("Buscar Registros");
        B_Buscar_Regis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Buscar_RegisMouseClicked(evt);
            }
        });

        B_Borrar_Regis.setText("Borrar Registros");
        B_Borrar_Regis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Borrar_RegisMouseClicked(evt);
            }
        });

        B_Listar_Regis.setText("Listar Registros");
        B_Listar_Regis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Listar_RegisMouseClicked(evt);
            }
        });

        jt_Registro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo De Dato", "Longitud", "Es llave primaria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jt_Registro);
        if (jt_Registro.getColumnModel().getColumnCount() > 0) {
            jt_Registro.getColumnModel().getColumn(0).setResizable(false);
            jt_Registro.getColumnModel().getColumn(1).setResizable(false);
            jt_Registro.getColumnModel().getColumn(2).setResizable(false);
            jt_Registro.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout jp_RegistroLayout = new javax.swing.GroupLayout(jp_Registro);
        jp_Registro.setLayout(jp_RegistroLayout);
        jp_RegistroLayout.setHorizontalGroup(
            jp_RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp_RegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                .addContainerGap())
        );
        jp_RegistroLayout.setVerticalGroup(
            jp_RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_RegistroLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(B_Listar_Regis)
                    .addComponent(B_Borrar_Regis)
                    .addComponent(B_Buscar_Regis)
                    .addComponent(B_Modi_Regis)
                    .addComponent(B_Intro_Regis))
                .addGap(30, 30, 30)
                .addComponent(jp_Registro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jp_Registro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(B_Intro_Regis)
                        .addGap(41, 41, 41)
                        .addComponent(B_Modi_Regis)
                        .addGap(48, 48, 48)
                        .addComponent(B_Buscar_Regis)
                        .addGap(50, 50, 50)
                        .addComponent(B_Borrar_Regis)
                        .addGap(57, 57, 57)
                        .addComponent(B_Listar_Regis)))
                .addContainerGap(184, Short.MAX_VALUE))
        );

        jTP_Menus.addTab("Registros", jPanel5);

        B_Expor_Excel.setText("Expotar Excel");

        B_Expo_XML.setText("Exportar XML con Schema");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(B_Expo_XML)
                    .addComponent(B_Expor_Excel))
                .addContainerGap(437, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(B_Expor_Excel)
                .addGap(51, 51, 51)
                .addComponent(B_Expo_XML)
                .addContainerGap(407, Short.MAX_VALUE))
        );

        jTP_Menus.addTab("Estandarizacion", jPanel7);

        B_Crear_Arch.setText("Crear Indice");

        B_ReIndex_Arch.setText("Re Indexar Archivos");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(B_ReIndex_Arch)
                    .addComponent(B_Crear_Arch))
                .addContainerGap(474, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(B_Crear_Arch)
                .addGap(60, 60, 60)
                .addComponent(B_ReIndex_Arch)
                .addContainerGap(404, Short.MAX_VALUE))
        );

        jTP_Menus.addTab("Indices", jPanel6);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jTP_Menus, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(102, 102, 102)
                    .addComponent(jl_nombre_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(500, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addGap(40, 40, 40)
                .addComponent(jTP_Menus, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(69, 69, 69)
                    .addComponent(jl_nombre_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(589, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 709, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 686, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void B_Crear_CampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Crear_CampoMouseClicked
        jt_nombreCampo.setEnabled(true);
        cb_tipoCampo.setEnabled(true);
        jb_crearCampo.setVisible(true);
        jr_llaveNo.setEnabled(true);
        jr_llaveSi.setEnabled(true);
        jb_modCampo.setVisible(false);
        

        jd_crearCampo.setModal(true);
        jd_crearCampo.pack();
        jd_crearCampo.setLocationRelativeTo(this);
        jd_crearCampo.setVisible(true);
    }//GEN-LAST:event_B_Crear_CampoMouseClicked

    private void B_Listar_CampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Listar_CampoMouseClicked

        if (archivo_actual.getLista_campos().isEmpty()) {
            JOptionPane.showMessageDialog(jp_Campos, "No existe ningun campo en este archivo.");
        } else {
            jP_tabla_ListarCampos.setVisible(true);
            refrescarTabla();
        }


    }//GEN-LAST:event_B_Listar_CampoMouseClicked

    private void B_Mod_CampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Mod_CampoMouseClicked
        if (table_ListarCampos.getSelectedRow() != -1) {

            String tipoDato = (String) table_ListarCampos.
                    getValueAt(table_ListarCampos.getSelectedRow(), 1);
            campo_seleccionado = table_ListarCampos.getSelectedRow();
            Campo campoMod = archivo_actual.getLista_campos().get(campo_seleccionado);
            
            jb_modCampo.setVisible(true);
            jb_crearCampo.setVisible(false);
            jl_CrearCampo.setText("Editar Campo");
            //Set nombre
            jt_nombreCampo.setText(campoMod.getNombre_Campo());
            //Set el tipo
            if(campoMod.getTipo_dato().equals("string")){
                cb_tipoCampo.setSelectedIndex(1);
            } else if(campoMod.getTipo_dato().equals("int")){
                cb_tipoCampo.setSelectedIndex(2);
            } else if(campoMod.getTipo_dato().equals("double")){
                cb_tipoCampo.setSelectedIndex(3);
            } else if(campoMod.getTipo_dato().equals("float")){
                cb_tipoCampo.setSelectedIndex(4);
            } else {
                //El tipo de dato es un char
                cb_tipoCampo.setSelectedIndex(5);
            }
            
            //Set longitud
            js_longitud.setValue((int) campoMod.getLongitud());
            
            //Set Si es llave primaria o no
            jr_llaveSi.setEnabled(true);
            jr_llaveNo.setEnabled(true);
            if(campoMod.isEsLlavePrimaria()){
                jr_llaveSi.setSelected(true);
                jr_llaveNo.setSelected(false);
            } else {
                jr_llaveSi.setSelected(false);
                jr_llaveNo.setSelected(true);
            }
            
            jd_crearCampo.setModal(true);
            jd_crearCampo.pack();
            jd_crearCampo.setLocationRelativeTo(this);
            jd_crearCampo.setVisible(true);
            table_ListarCampos.clearSelection();

        } else {

            JOptionPane.showMessageDialog(this, "No selecciono un campo en la tabla");
        }
    }//GEN-LAST:event_B_Mod_CampoMouseClicked

    private void B_Borrar_CampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Borrar_CampoMouseClicked

        if (table_ListarCampos.getSelectedRow() != -1) {

            DefaultTableModel modelo = (DefaultTableModel) table_ListarCampos.getModel();
            int index = table_ListarCampos.getSelectedRow();
            
            int opcion_eliminar = JOptionPane.showConfirmDialog(jp_Campos,"¿Esta seguro que quiere eliminar el campo?", 
                    "Eliminar Campo", JOptionPane.YES_NO_OPTION);
            if(opcion_eliminar == 0){
                //Selecciono SI el usuario
                modelo.removeRow(index);
                archivo_actual.getLista_campos().remove(index);
                archivo_actual.setGuardado(false);//Archivo se debe salvar
                JOptionPane.showMessageDialog(jp_Campos, "El campo se ha eliminado de la tabla correctamente");
                
                //Preguntar si quiere guardar los cambios
                if (!archivo_actual.isGuardado()) {
                    //Archivo no esta guardado
                    int resultado = JOptionPane.showConfirmDialog(jP_menuArchivo, "No ha guardado el archivo actual\n¿Desea guardarlo?"
                        + "", "Cerrar Archivo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (resultado == 0) {
                        //Ingresa SI el usuario
                        //Verificar si el archivo es nuevo o si ya ha sido utilizado y guardado antes
                        if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                            B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                        } else {
                            //Solo se guarda el archivo ya existente
                            escribirArchivo();
                            JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha guardado exitosamente!");
                        }

                    } else {
                        //Ingresa NO el usuario 
                        JOptionPane.showMessageDialog(jP_menuArchivo, "No se guardaron los datos del archivo: " + archivo_actual.getNombre_archivo() + " .");
                    }
                    } else {
                        //Archivo esta guardado
                    }
            } else {
                //Selecciono NO el usuario
                JOptionPane.showMessageDialog(jp_Campos, "No se elimino el campo.");
            }
        } else {

            JOptionPane.showMessageDialog(this, "No selecciono un campo en la tabla");
        }
    }//GEN-LAST:event_B_Borrar_CampoMouseClicked

    private void jT_ArchivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_ArchivosMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() < 1) {
            nodo_seleccionado = null;
        } else {
            nodo_seleccionado = (DefaultMutableTreeNode) jT_Archivos.getSelectionPath().getLastPathComponent();
        }
    }//GEN-LAST:event_jT_ArchivosMouseClicked

    private void jb_abrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_abrirArchivoActionPerformed
        //Abrir el archivo mediante el nodo del Jtree seleccionado

        boolean confirm_open = false;

        if (nodo_seleccionado == null) {
            JOptionPane.showMessageDialog(jd_abrirArchivo, "No se ha seleccionado ningun archivo.");
            confirm_open = false;
        } else if (nodo_seleccionado == jT_Archivos.getModel().getRoot()) {
            JOptionPane.showMessageDialog(jd_abrirArchivo, "No se puede seleccionar la raiz de los archivos");
            confirm_open = false;
        } else if (nodo_seleccionado.getUserObject() == archivo_actual) {
            JOptionPane.showMessageDialog(jd_abrirArchivo, "El archivo seleccionado ya esta abierto.");
        } else {
            //Se selecciono un archivo
            if (archivo_actual == null) {
                //No hay otro archivo abierto
                confirm_open = true;
            } else {
                //Hay un archivo abierto
                int resultado = JOptionPane.showConfirmDialog(jP_menuArchivo, "El archivo '" + archivo_actual.getNombre_archivo()
                        + "' esta abierto\n¿Desea guardarlo para cerrarlo?", "Abrir Archivo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (resultado == 0) {
                    //Ingresa SI el usuario
                    //Llevar a opcion de salvar archivo
                    if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                        //Primera ves que se guarda un nuevo archivo
                        B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                    } else {//Ya existia el archivo
                        escribirArchivo();
                        JOptionPane.showMessageDialog(jd_abrirArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha guardado exitosamente!");
                        JOptionPane.showMessageDialog(jd_abrirArchivo, "!El archivo: " + archivo_actual.getNombre_archivo() + " se ha cerrado correctamente!");
                    }

                    confirm_open = true;
                } else {
                    //Ingresa NO el usuario
                    if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                        //si el archivo no se ha guardado antes e ingreso NO, Se pierden los datos
                        Lista_Archivos.remove(archivo_actual);
                        refrescarJTree();
                        archivo_actual = null;
                    }
                    //El archivo abierto no se guardara antes que de abrir uno nuevo
                    if (archivo_actual == null) {
                        JOptionPane.showMessageDialog(jd_abrirArchivo, "No se guardo el ' nuevo archivo ' .");
                    } else {
                        JOptionPane.showMessageDialog(jd_abrirArchivo, "No se guardo el archivo: " + archivo_actual.getNombre_archivo());
                    }

                    confirm_open = true;
                }
            }
        }

        if (confirm_open) {
            archivo_actual = null;
            archivo_actual = (Archivo) nodo_seleccionado.getUserObject();
            JOptionPane.showMessageDialog(jd_abrirArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha abierto exitosamente!");
            jl_nombre_archivo.setText(archivo_actual.getNombre_archivo());
            archivo_actual.setGuardado(false);
            jl_nombre_archivo.setVisible(true);
            jd_abrirArchivo.dispose();
            
            //Leer campos y agregarlos a la lista de campos del archivo
            Scanner sc;
            ArrayList<String> buffer = new ArrayList();
            int sizeCampos;
            try {
                sc = new Scanner(archivo_actual.getArchivo());
                sizeCampos = sc.nextInt();
                
                for(int i = 0; i < sizeCampos; i++){
               
                    String cadena = sc.next();
                    cadena = cadena.substring(1, cadena.length() - 1);
                    buffer.add(cadena);
                }
            } catch (Exception e) {
            }
            
            Scanner parse;
            ArrayList<String> tokens = new ArrayList();

            for (int i = 0; i < buffer.size(); i++) {
                String var = buffer.get(i);
                parse = new Scanner(var);
                parse.useDelimiter(",");
                while (parse.hasNext()) {
                    tokens.add(parse.next());
                }
                parse.reset();
            }
            buffer.clear();

            for (int i = 0; i < tokens.size(); i++) {
                parse = new Scanner(tokens.get(i));
                parse.useDelimiter(":");
                while (parse.hasNext()) {
                   parse.next();
                   buffer.add(parse.next());
                }
            }

            int index = buffer.size() / 4;
            String nombre = "", tipo = "";
            int longitud = 0;
            String esLlave = "";
            int flag = 0, secondaryFlag = 0;
            
            archivo_actual.getLista_campos().clear();

            while (flag < index) {
                nombre = buffer.get(secondaryFlag);
                secondaryFlag++;

                tipo = buffer.get(secondaryFlag);
                secondaryFlag++;

                longitud = Integer.parseInt(buffer.get(secondaryFlag));
                secondaryFlag++;

                esLlave = buffer.get(secondaryFlag);
                secondaryFlag++;

                Campo campo = new Campo(nombre, tipo, longitud);

                if (esLlave.equals("true")) {
                    campo.setEsLlavePrimaria(true);
                }
                archivo_actual.getLista_campos().add(campo);
                flag++;
            }
            
             /*table_ListarCampos.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Nombre", "Tipo de Dato", "Longitud", "Es llave Primaria"
                }
            ));*/
        }
    }//GEN-LAST:event_jb_abrirArchivoActionPerformed

    private void jb_salirAbrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_salirAbrirArchivoActionPerformed
        //Cerrar JDialog para abrir archivo
        jd_abrirArchivo.dispose();
    }//GEN-LAST:event_jb_salirAbrirArchivoActionPerformed

    private void B_Nuevo_ArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_Nuevo_ArchActionPerformed
        //Creacion de un nuevo archivo vacio
        //Verificacion si hay un archivo abierto
        if (archivo_actual == null) {
            //do nothing
        } else {
            //Hay un archivo abierto, preguntar si lo quiere guardar para cerrarlo
            int resultado_guardar = JOptionPane.showConfirmDialog(jP_menuArchivo, "No ha guardado el archivo actual\n¿Desea guardarlo?"
                    + "", "Salir", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            //Llevar a metodo salvar archivo 
            if (resultado_guardar == 0) {
                //Selecciono SI
                if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                    //Es la primera vez que se guarda el archivo
                    B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                } else {
                    //El archivo ya se ha guardado previamente
                    escribirArchivo();
                }
            } else {
                //Selecciono NO
                if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                    Lista_Archivos.remove(archivo_actual);
                }
                JOptionPane.showMessageDialog(jP_menuArchivo, "No se guardo el archivo: '" + archivo_actual.getNombre_archivo() + "'.");
                archivo_actual = null;

            }
        }

        JOptionPane.showMessageDialog(jP_menuArchivo, "cargando...");
        Archivo archivo_nuevo = new Archivo("./nuevo_archivo.txt");
        Lista_Archivos.add(archivo_nuevo);
        archivo_actual = archivo_nuevo;
        JOptionPane.showMessageDialog(jP_menuArchivo, "Se ha creado el  archivo exitosamente",
                "nuevo archivo", JOptionPane.INFORMATION_MESSAGE);
        //Agregar el nombre del documento en la pantalla principal
        jl_nombre_archivo.setText(archivo_actual.getNombre_archivo());
        jl_nombre_archivo.setVisible(true);
        //Refrescar JTree Archivos
        refrescarJTree();
    }//GEN-LAST:event_B_Nuevo_ArchActionPerformed

    private void B_Abrir_ArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_Abrir_ArchActionPerformed
        //Abrir ventana para abrir archivo
        if (Lista_Archivos.isEmpty()) {
            JOptionPane.showMessageDialog(jP_menuArchivo, "No hay ningun archivo en el sistema.",
                    "Advertencia Abrir Archivo", JOptionPane.WARNING_MESSAGE);
        } else {
            nodo_seleccionado = null;
            refrescarJTree();
            jd_abrirArchivo.setModal(true);
            jd_abrirArchivo.pack();
            jd_abrirArchivo.setLocationRelativeTo(this);
            jd_abrirArchivo.setVisible(true);
        }
        
    }//GEN-LAST:event_B_Abrir_ArchActionPerformed

    private void B_Salvar_ArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_Salvar_ArchActionPerformed
        //Metodo salvar archivo
        String nombre_archivo = null;
        boolean confirm_name = false;
        boolean confirm_save = false;

        if (archivo_actual != null) {
            //Revisar si el archivo ya esta guardado
            if (archivo_actual.isGuardado()) {
                JOptionPane.showMessageDialog(jP_menuArchivo, "El archivo: '" + archivo_actual.getNombre_archivo()
                        + "' ya esta guardado.");
            } else {
                //El archivo no esta guardado
                //Revisar si el archivo ya tiene un nombre guardado
                if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                    //No tiene un nombre guardado, significando salvar por 1era vez el archivo
                    while (!confirm_name) {
                        nombre_archivo = JOptionPane.showInputDialog(jP_menuArchivo, "Ingrese el nombre del archivo: ",
                                "Salvar Archivo", JOptionPane.DEFAULT_OPTION);

                        if (nombre_archivo != null) {
                            //El usuario ingreso el nombre del archivo
                            //No se puede utilizar el nombre "nuevo documento" ya que es el nombre base
                            if (nombre_archivo.equals("nuevo archivo")) {
                                JOptionPane.showMessageDialog(jP_menuArchivo, "No se puede utilizar el nombre 'nuevo archivo\n'"
                                        + "por decision del desarrolador.");
                            } else {
                                confirm_name = true;
                            }

                            if (confirm_name) {
                                //Si pasa la primera validacion puede ir a la segunda validacion
                                //Revisar validaciones para el nombre
                                if (nombre_archivo.contains(".")) {
                                    //El archivo no puede llevar un punto
                                    JOptionPane.showMessageDialog(jP_menuArchivo, "El Archivo no puede incluir un '.'",
                                            "Advertencia", JOptionPane.WARNING_MESSAGE);
                                    confirm_name = false;
                                } else {
                                    confirm_name = true;
                                }
                                if (confirm_name) {
                                    //Revisar que el nombre no sea igual a otro archivo
                                    nombre_archivo = nombre_archivo + ".txt";
                                    for (int i = 0; i < Lista_Archivos.size(); i++) {
                                        if (nombre_archivo.equals(Lista_Archivos.get(i).getNombre_archivo())) {
                                            //El nombre se repite
                                            JOptionPane.showMessageDialog(jP_menuArchivo, "El nombre " + nombre_archivo + " ya esta siendo "
                                                    + "utilizado para otro archivo", "Advertencia", JOptionPane.WARNING_MESSAGE);
                                            confirm_name = false;
                                            break;
                                        } else {
                                            confirm_name = true;
                                        }
                                    }
                                }
                            }
                            //Confirmacion de dato
                            if (confirm_name) {
                                archivo_actual.setNombre_archivo(nombre_archivo);
                                archivo_actual.setArchivo("./" + nombre_archivo);
                                confirm_save = true;
                            }
                        } else {
                            //do nothing, eligio la opcion cancelar
                            confirm_name = true;
                            confirm_save = false;
                        }
                    }
                } else {
                    //El archivo ya tiene nombre propio y se ha guardado minimo 1 vez
                    int opcion_save = JOptionPane.showConfirmDialog(jP_menuArchivo, "¿Desea guardar el archivo "
                            + archivo_actual.getNombre_archivo() + "?", "Salvar Archivo", JOptionPane.YES_NO_OPTION);
                    if (opcion_save == 0) {
                        //Selecciono SI el usuario
                        confirm_save = true;
                    } else {
                        //Selecciono NO el usuario
                        confirm_save = false;
                    }
                }
                //Guardar si se ha confirmado por medio de las validaciones
                if (confirm_save == true) {
                    //Escribir el archivo
                    escribirArchivo();
                    JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo se ha guardado exitosamente!");
                    archivo_actual.setGuardado(true);
                    //Refrescar JTree
                    refrescarJTree();
                } else {/*No se guarda el programa, do nothing*/
                }
            }

        } else {
            //No hay un archivo siendo utilizado
            JOptionPane.showMessageDialog(jP_menuArchivo, "No se esta utilizando ningun archivo.\n", "Advertencia",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_B_Salvar_ArchActionPerformed

    private void B_Cerrar_ArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_Cerrar_ArchActionPerformed
        //Metodo cerrar archivo
        boolean confirm_cerrar = false;
        if (archivo_actual != null) {
            //Hay un archivo abierto
            if (!archivo_actual.isGuardado()) {
                //Archivo no esta guardado
                int resultado = JOptionPane.showConfirmDialog(jP_menuArchivo, "No ha guardado el archivo actual\n¿Desea guardarlo?"
                        + "", "Cerrar Archivo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (resultado == 0) {
                    //Ingresa SI el usuario
                    //Verificar si el archivo es nuevo o si ya ha sido utilizado y guardado antes
                    if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                        B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                    } else {
                        //Solo se guarda el archivo ya existente
                        escribirArchivo();
                        JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha guardado exitosamente!");
                    }

                    confirm_cerrar = true;
                } else {
                    //Ingresa NO el usuario 
                    JOptionPane.showMessageDialog(jP_menuArchivo, "No se guardaron los datos del archivo: " + archivo_actual.getNombre_archivo() + " .",
                            "Cerrar Archivo", JOptionPane.DEFAULT_OPTION);
                    confirm_cerrar = true;
                }
            } else {
                //Archivo esta guardado
                confirm_cerrar = true;
            }
        } else {
            //No hay un archivo abierto por el momento
            JOptionPane.showMessageDialog(jP_menuArchivo, "No hay ningun archivo abierto actualmente."
                    + "\nNo puede hacer uso de esta función.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        //Cerrar Archivo
        if (confirm_cerrar) {
            archivo_actual = null;
            jl_nombre_archivo.setVisible(false);
            JOptionPane.showMessageDialog(jP_menuArchivo, "Se ha cerrado el archivo correctamente."
                    + "", "Cerrar Archivo", JOptionPane.DEFAULT_OPTION);
            //Ocultar tabla
            jP_tabla_ListarCampos.setVisible(false);
        }
    }//GEN-LAST:event_B_Cerrar_ArchActionPerformed

    private void B_SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_SalirActionPerformed
        //Metodo salir
        boolean confirmar_salir = false;
        if (archivo_actual != null && !archivo_actual.isGuardado()) {
            //Se esta usando un archivo y no esta guardado
            int resultado = JOptionPane.showConfirmDialog(jP_menuArchivo, "No ha guardado el archivo actual: " + archivo_actual.getNombre_archivo() + "\n¿Desea guardarlo?"
                    + "", "Salir", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (resultado == 0) {
                //Ingresa SI el usuario
                //Verificar si el archivo es nuevo o si ya ha sido guardado, llevar a opcion de salvar archivo
                if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                    B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                } else {
                    //El archivo no es nuevo
                    JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha guardado exitosamente!");
                    JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo: " + archivo_actual.getNombre_archivo() + " se ha cerrado correctamente!");
                    escribirArchivo();
                    archivo_actual = null;
                }
                confirmar_salir = true;
            } else {
                //Ingresa NO el usuario
                confirmar_salir = true;
            }
        } else {
            confirmar_salir = true;
        }

        if (confirmar_salir) {
            int resultado_salir = JOptionPane.showConfirmDialog(jP_menuArchivo, "¿Esta seguro de salir?"
                    + "", "Salir", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (resultado_salir == 0) { // Ingreso SI el usuario
                JOptionPane.showMessageDialog(jP_menuArchivo, "Hasta Luego.", "Salir", JOptionPane.PLAIN_MESSAGE);
                System.exit(0);
            } else {//Ingreso NO el usuario
                //do nothing
            }
        }
    }//GEN-LAST:event_B_SalirActionPerformed

    private void jTP_MenusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTP_MenusStateChanged
        //Cambio de Tab
        int indice_menu = jTP_Menus.getSelectedIndex();
        if (archivo_actual == null && indice_menu > 0) {
            jTP_Menus.setSelectedIndex(0);
            JOptionPane.showMessageDialog(jP_menuArchivo, "No hay archivos en el sistema.\n"
                    + "Debe abrir o crear un nuevo archivo para acceder al resto de funciones.");
        }

        if (archivo_actual != null) {
            jP_tabla_ListarCampos.setVisible(false);
        }
    }//GEN-LAST:event_jTP_MenusStateChanged

    private void jb_crearCampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_crearCampoMouseClicked

        boolean confirmar_crearCampo = false;
        boolean continuar_addCampo = true;
        Campo nuevoCampo = new Campo();

        //El usuario puede agregar los campo que desee
        //while (continuar_addCampo) {

        //Validar entradas de datos
        //Validar nombre de campo
        if (jt_nombreCampo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(jd_crearCampo, "!No puede dejar en blanco el nombre del campo!");
            confirmar_crearCampo = false;
        } else {
            confirmar_crearCampo = true;
            nuevoCampo.setNombre_Campo(jt_nombreCampo.getText());
        }
        
        //Validar Tipo de Dato
        if (cb_tipoCampo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(jd_crearCampo, "Debe elegir el tipo del dato.");
            confirmar_crearCampo = false;
        } else {
            int opcion = cb_tipoCampo.getSelectedIndex();
            //Agregar el tipo de dato que selecciono el usuario
            switch (opcion) {
                case 1:
                    //Eligio String
                    nuevoCampo.setTipo_dato("string");
                    break;
                case 2:
                    //Eligio Int
                    nuevoCampo.setTipo_dato("int");
                    break;
                case 3:
                    //Eligio Double
                    nuevoCampo.setTipo_dato("double");
                    break;
                case 4:
                    //Eligio Float
                    nuevoCampo.setTipo_dato("float");
                    break;
                case 5:
                    //Eligio Char
                    nuevoCampo.setTipo_dato("char");
                    break;
                default:
            }
            confirmar_crearCampo = true;
        }

        //Validar Longitud
        if ((int) js_longitud.getValue() == 0 || (int) js_longitud.getValue() > 30) {
            JOptionPane.showMessageDialog(jd_crearCampo, "La longitud del campo debe ser mayor a 0.");
            confirmar_crearCampo = false;
        } else {
            confirmar_crearCampo = true;
            nuevoCampo.setLongitud((int) js_longitud.getValue());
        }

        //Validar Si es llave primaria
        //Recuperamos la eleccion de marcar como llave primaria
        boolean esllavePrimaria = false;

        if (!jr_llaveNo.isSelected() && !jr_llaveSi.isSelected()) {
            //No selecciono sobre la opcion si el campo es llave primaria
            JOptionPane.showMessageDialog(jd_crearCampo, "Debe elegir si el campo es una llave primaria o no.");
        }

        if (jr_llaveSi.isSelected()) {
            esllavePrimaria = true;
        } else {
            esllavePrimaria = false;
        }

        //Busqueda para verificar que no haya otra llave primaria
        if (archivo_actual.getLista_campos().isEmpty()) {
        //La lista de campos esta vacia 
            if (esllavePrimaria) {
                //eligio el campo como llave primaria
                nuevoCampo.setEsLlavePrimaria(true);
            } else {
                //do nothing, no eligio el campo como llave primaria
            }
        } else {
            //La lista de campos no esta vacia
            //Recorrer la lista y verificar que otro campo no sea una llave primaria
            boolean confirm_LlaveP = true;
            if (esllavePrimaria) {
                for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                    if (archivo_actual.getLista_campos().get(i).isEsLlavePrimaria() == true) {
                        confirm_LlaveP = false;
                        break;
                    }
                }
                //Mostrar mensaje que ya existe otra una llave primaria
                if (!confirm_LlaveP) {
                    JOptionPane.showMessageDialog(jd_crearCampo, "Otro campo ya es una llave primaria en este archivo.");
                    confirmar_crearCampo = false;
                } else {
                    nuevoCampo.setEsLlavePrimaria(true);
                    confirmar_crearCampo = true;
                }
            }

        }
        
        //Ultima verificacion
        if (nuevoCampo.getNombre_Campo() == null || nuevoCampo.getTipo_dato() == null
                || nuevoCampo.getLongitud() == 0) {
            confirmar_crearCampo = false;
        }
        //Crear campo
        if (confirmar_crearCampo == true) {
            archivo_actual.getLista_campos().add(nuevoCampo);
            JOptionPane.showMessageDialog(jd_crearCampo, "Se creo el campo exitosamente!");
            //Si el panel donde esta la tabla esta habilitado actualizarla
            if(jP_tabla_ListarCampos.isVisible()){
                refrescarTabla();
            }
            archivo_actual.setGuardado(false);
        }
        
        jt_nombreCampo.setText("");
        cb_tipoCampo.setSelectedIndex(0);
        js_longitud.setValue(0);
        jr_llaveNo.setSelected(false);
        jr_llaveSi.setSelected(false);
        jd_crearCampo.dispose();
        //Archivo se debe guardar
            //Preguntar al usuario si quiere ingresar otro campo
            /*int opcion_seguir = JOptionPane.showConfirmDialog(jd_crearCampo, "¿Desea crear otro campo?",
                        "Crear Campo", JOptionPane.YES_NO_OPTION);*/

            /*if (opcion_seguir == 0) {
                //Selecciono SI el usuario
                    continuar_addCampo = true;
                } else {
                    //Selecciono NO el usuario
                    
                    continuar_addCampo = false; 
                }
            } else {
                //No ingreso todos los datos correctamente
                continuar_addCampo = false;
            }*/
        
        
        
        
        //}// fin while
        
        //Borrar lo que estaba antes
        jt_nombreCampo.setText("");
        cb_tipoCampo.setSelectedIndex(-1);
        js_longitud.setValue(0);
    }//GEN-LAST:event_jb_crearCampoMouseClicked

    private void jb_modCampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_modCampoMouseClicked

        boolean confirmar_modCampo = false;
        Campo Campo_mod = archivo_actual.getLista_campos().get(campo_seleccionado);
        String tipo_mod = "";
        //El usuario puede agregar los campo que desee
        //Validar entradas de datos
        //Validar nombre de campo
        if (jt_nombreCampo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(jd_crearCampo, "!No puede dejar en blanco el nombre del campo!");
            confirmar_modCampo = false;
        } else {
            confirmar_modCampo = true;
            
        }
        //Validar Tipo de Dato
        if (cb_tipoCampo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(jd_crearCampo, "Debe elegir el tipo del dato.");
            confirmar_modCampo = false;
        } else {
            int opcion = cb_tipoCampo.getSelectedIndex();
            //Agregar el tipo de dato que selecciono el usuario
            switch (opcion) {
                case 1:
                    //Eligio String
                    tipo_mod = "string";
                    break;
                case 2:
                    //Eligio Int
                    tipo_mod = "int";
                    break;
                case 3:
                    //Eligio Double
                    tipo_mod = "double";
                    break;
                case 4:
                    //Eligio Float
                    tipo_mod = "float";
                    break;
                case 5:
                    //Eligio Char
                    tipo_mod = "char";
                    break;
                default:
            }
            confirmar_modCampo = true;
        }

        //Validar Longitud
        if ((int) js_longitud.getValue() == 0 ) {
            JOptionPane.showMessageDialog(jd_crearCampo, "La longitud del campo debe ser mayor a 0.");
            confirmar_modCampo = false;
        } else if((int) js_longitud.getValue() > 30){
            JOptionPane.showMessageDialog(jd_crearCampo, "La longitud del campo no puede ser ser mayor a 30.");
            confirmar_modCampo = false;
        }else {
            confirmar_modCampo = true;
        }

        //Validar Si es llave primaria
        //Recuperamos la eleccion de marcar como llave primaria
        boolean esllavePrimaria = false;

        if (!jr_llaveNo.isSelected() && !jr_llaveSi.isSelected()) {
            //No selecciono sobre la opcion si el campo es llave primaria
            JOptionPane.showMessageDialog(jd_crearCampo, "Debe elegir si el campo es una llave primaria o no.");
        }

        boolean confirm_LlaveP = true;
        if (jr_llaveSi.isSelected()) {
            esllavePrimaria = true;
        } else {
            esllavePrimaria = false;
            confirm_LlaveP  = false;
        }
        
        //Busqueda para verificar que no haya otra llave primaria
        if (archivo_actual.getLista_campos().isEmpty()) {
        //La lista de campos esta vacia 
            if (esllavePrimaria) {
                //eligio el campo como llave primaria
               Campo_mod.setEsLlavePrimaria(true);
            } else {
                //do nothing, no eligio el campo como llave primaria
            }
        } else {
            //La lista de campos no esta vacia
            //Recorrer la lista y verificar que otro campo no sea una llave primaria
            
            if (esllavePrimaria) {
                for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                    if (archivo_actual.getLista_campos().get(i).isEsLlavePrimaria() == true) {
                        if(archivo_actual.getLista_campos().get(i).isEsLlavePrimaria() == Campo_mod.isEsLlavePrimaria()){
                            confirm_LlaveP =true;
                            break;
                        } else {
                            confirm_LlaveP = false;
                        break;
                        }
                        
                    }
                }
                //Mostrar mensaje que ya existe otra una llave primaria
                if (!confirm_LlaveP) {
                    JOptionPane.showMessageDialog(jd_crearCampo, "Otro campo ya es una llave primaria en este archivo.");
                    confirmar_modCampo = false;
                } else {
                    confirmar_modCampo = true;
                }
            }

        }
        
        //Ultima verificacion
        if (Campo_mod.getNombre_Campo() == null || Campo_mod.getTipo_dato() == null
                || Campo_mod.getLongitud() == 0) {
            confirmar_modCampo = false;
        }
        //Crear campo
        
        
        if(Campo_mod.getNombre_Campo().equals(jt_nombreCampo.getText()) && Campo_mod.getTipo_dato().equals(tipo_mod)
                && Campo_mod.getLongitud() == (int)js_longitud.getValue()){
            if(!confirm_LlaveP == false && !Campo_mod.isEsLlavePrimaria()){
                
            } else if(confirm_LlaveP == false && Campo_mod.isEsLlavePrimaria()){
                JOptionPane.showMessageDialog(jd_crearCampo, "No se realizo ninguna modificacion en el campo.");
                confirmar_modCampo = false;
                archivo_actual.setGuardado(false);
                jt_nombreCampo.setText("");
                cb_tipoCampo.setSelectedIndex(0);
                js_longitud.setValue(0);
                jr_llaveNo.setSelected(false);
                jr_llaveSi.setSelected(false);
                jd_crearCampo.dispose();
            }
            
        }
        if (confirmar_modCampo == true) {
            
            //Realizar modificaciones
            
            Campo_mod.setNombre_Campo(jt_nombreCampo.getText());//Modificar Nombre
            Campo_mod.setTipo_dato(tipo_mod);//Modificar Tipo de Dato
            Campo_mod.setLongitud((int)js_longitud.getValue());
            
            if(!confirm_LlaveP){
                Campo_mod.setEsLlavePrimaria(false);
            } else {
                Campo_mod.setEsLlavePrimaria(true);
            }
            
            JOptionPane.showMessageDialog(jd_crearCampo, "Se modifico el campo exitosamente!");
            //Si el panel donde esta la tabla esta habilitado actualizarla
            if(jP_tabla_ListarCampos.isVisible()){
                refrescarTabla();
            }
            archivo_actual.setGuardado(false);
            jt_nombreCampo.setText("");
            cb_tipoCampo.setSelectedIndex(0);
            js_longitud.setValue(0);
            jr_llaveNo.setSelected(false);
            jr_llaveSi.setSelected(false);
            jd_crearCampo.dispose();
            
            //Preguntar si quiere guardar el archivo
            if (!archivo_actual.isGuardado()) {
                //Archivo no esta guardado
                int resultado = JOptionPane.showConfirmDialog(jP_menuArchivo, "No ha guardado el archivo actual\n¿Desea guardarlo?"
                    + "", "Cerrar Archivo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (resultado == 0) {
                    //Ingresa SI el usuario
                    //Verificar si el archivo es nuevo o si ya ha sido utilizado y guardado antes
                    if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                        B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                    } else {
                        //Solo se guarda el archivo ya existente
                        escribirArchivo();
                        JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha guardado exitosamente!");
                    }

                } else {
                    //Ingresa NO el usuario 
                    JOptionPane.showMessageDialog(jP_menuArchivo, "No se guardaron los datos del archivo: " + archivo_actual.getNombre_archivo() + " .");
                }
            } else {
                //Archivo esta guardado
            }
        }
        
        
    }//GEN-LAST:event_jb_modCampoMouseClicked

    private void jt_nombreCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jt_nombreCampoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jt_nombreCampoActionPerformed

    private void B_Intro_RegisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Intro_RegisMouseClicked
        jd_introducirRegistro.setVisible(true);
        //Hay un jLabel que deberia tener el nombre del campo para saber que poner en el registro
        
        
        
    }//GEN-LAST:event_B_Intro_RegisMouseClicked

    private void b_introducirRegistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_introducirRegistroMouseClicked

        jd_introducirRegistro.setVisible(false); 
        tf_introducirRegistro.setText("");
    }//GEN-LAST:event_b_introducirRegistroMouseClicked

    private void B_Buscar_RegisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Buscar_RegisMouseClicked
    String buscar = JOptionPane.showInputDialog(true);
    // Registro que se buscarà
    }//GEN-LAST:event_B_Buscar_RegisMouseClicked

    private void B_Modi_RegisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Modi_RegisMouseClicked
        // TODO add your handling code here:
        if (jt_Registro.getSelectedRow()!= -1){
            jd_modificarRegistro.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No selecciono un campo en la tabla");
        }
    }//GEN-LAST:event_B_Modi_RegisMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        jd_modificarRegistro.setVisible(false);
        tf_modificarRegistro.setText("");
    }//GEN-LAST:event_jButton1MouseClicked

    private void B_Borrar_RegisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Borrar_RegisMouseClicked
        // TODO add your handling code here:
        if(jt_Registro.getSelectedRow() != -1){
            
        }else{
            JOptionPane.showMessageDialog(this, "No selecciono un campo en la tabla");
        }
    }//GEN-LAST:event_B_Borrar_RegisMouseClicked

    private void B_Listar_RegisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Listar_RegisMouseClicked
        // TODO add your handling code here:
        jp_Registro.setVisible(true);
    }//GEN-LAST:event_B_Listar_RegisMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_Abrir_Arch;
    private javax.swing.JButton B_Borrar_Campo;
    private javax.swing.JButton B_Borrar_Regis;
    private javax.swing.JButton B_Buscar_Regis;
    private javax.swing.JButton B_Cerrar_Arch;
    private javax.swing.JButton B_Crear_Arch;
    private javax.swing.JButton B_Crear_Campo;
    private javax.swing.JButton B_Expo_XML;
    private javax.swing.JButton B_Expor_Excel;
    private javax.swing.JButton B_Intro_Regis;
    private javax.swing.JButton B_Listar_Campo;
    private javax.swing.JButton B_Listar_Regis;
    private javax.swing.JButton B_Mod_Campo;
    private javax.swing.JButton B_Modi_Regis;
    private javax.swing.JButton B_Nuevo_Arch;
    private javax.swing.JButton B_ReIndex_Arch;
    private javax.swing.JButton B_Salir;
    private javax.swing.JButton B_Salvar_Arch;
    private javax.swing.ButtonGroup BgLlavePrimaria;
    private javax.swing.JButton b_introducirRegistro;
    private javax.swing.JComboBox<String> cb_tipoCampo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jP_crearCampo;
    private javax.swing.JPanel jP_menuArchivo;
    private javax.swing.JPanel jP_tabla_ListarCampos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTP_Menus;
    private javax.swing.JTree jT_Archivos;
    private javax.swing.JButton jb_abrirArchivo;
    private javax.swing.JButton jb_crearCampo;
    private javax.swing.JButton jb_modCampo;
    private javax.swing.JButton jb_salirAbrirArchivo;
    private javax.swing.JDialog jd_abrirArchivo;
    private javax.swing.JDialog jd_buscarRegistro;
    private javax.swing.JDialog jd_crearCampo;
    private javax.swing.JDialog jd_introducirRegistro;
    private javax.swing.JDialog jd_modificarRegistro;
    private javax.swing.JLabel jl_CrearCampo;
    private javax.swing.JLabel jl_Longitud;
    private javax.swing.JLabel jl_NombredeCampo;
    private javax.swing.JLabel jl_TipodeDato;
    private javax.swing.JLabel jl_introRegistro;
    private javax.swing.JLabel jl_nombre_archivo;
    private javax.swing.JLabel jl_tituloCampos;
    private javax.swing.JPanel jp_Campos;
    private javax.swing.JPanel jp_Registro;
    private javax.swing.JRadioButton jr_llaveNo;
    private javax.swing.JRadioButton jr_llaveSi;
    private javax.swing.JSpinner js_longitud;
    private javax.swing.JTable jt_Registro;
    private javax.swing.JTextField jt_nombreCampo;
    private javax.swing.JTable table_ListarCampos;
    private javax.swing.JTextField tf_introducirRegistro;
    private javax.swing.JTextField tf_modificarRegistro;
    // End of variables declaration//GEN-END:variables

    //Variables locales
    DefaultMutableTreeNode nodo_seleccionado = null;
    int campo_seleccionado = 0;
    

    public void refrescarJTree() {
        DefaultTreeModel m = (DefaultTreeModel) jT_Archivos.getModel();
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) m.getRoot();
        DefaultMutableTreeNode nodo_archivo;

        //Dejar limpio el arbol al actualizar
        raiz.removeAllChildren();
        m.reload();

        for (int i = 0; i < Lista_Archivos.size(); i++) {
            nodo_archivo = new DefaultMutableTreeNode(Lista_Archivos.get(i));
            raiz.add(nodo_archivo);
        }
        m.reload();
    }

    public void refrescarTabla() {

        table_ListarCampos.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Nombre", "Tipo de Dato", "Longitud", "Es llave Primaria"
                }
        ));

        DefaultTableModel model = (DefaultTableModel) table_ListarCampos.getModel();

        for (Campo c : archivo_actual.getLista_campos()) {
            Object[] obj = {c.getNombre_Campo(), c.getTipo_dato(), Integer.toString(c.getLongitud()), c.isEsLlavePrimaria()};
            model.addRow(obj);
        }
        table_ListarCampos.setModel(model);
    }

    public void escribirArchivo() {
        archivo_actual.setGuardado(true);
        FileWriter fw = null;
        BufferedWriter bw = null;
        //Aplicar el nuevo nombre dado  
        try {
            fw = new FileWriter(archivo_actual.getArchivo(), false);
            bw = new BufferedWriter(fw);

            //Escribir la definicion de los campos y registros
            //Escritura de los campos en metadata
            String nombre, tipo, longitud, esllave;
            if (archivo_actual.getLista_campos().isEmpty()) {
                //do nothing 
            } else {
                
                //imprimir el numero de campos del archivo para su correcta lectura
                bw.write(archivo_actual.getLista_campos().size() + "\n");
                
                for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                    Campo temp = archivo_actual.getLista_campos().get(i);
                    nombre = temp.getNombre_Campo();
                    tipo = temp.getTipo_dato();
                    longitud = Integer.toString(temp.getLongitud());
                    if (temp.isEsLlavePrimaria()) {
                        esllave = "true";
                    } else {
                        esllave = "false";
                    }

                    bw.write("{Nombre:" + nombre + ",Tipo:" + tipo
                            + ",Longitud:" + longitud + ",EsLlave:" + esllave + "}");
                    bw.write("\n");
                }
                
                //escritura de la ultima fecha de modificacion/apertura
                Date d = new Date();
                bw.write(d.toString()+ "\n");
                
                //TODO escritura de la cantidad de registros
                
                //TODO escribir la punta de reconstruccion availlist
            }

            bw.flush();
        } catch (Exception ex) {

        } finally {
            try {
                bw.close();
                fw.close();
            } catch (IOException e) {
            }
        }

    }


}
