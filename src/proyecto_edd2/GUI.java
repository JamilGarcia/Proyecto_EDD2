package proyecto_edd2;

import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.RandomAccessFile;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Text;

/**
 *
 * @author User
 */
public class GUI extends javax.swing.JFrame {

    ArrayList<Archivo> Lista_Archivos = new ArrayList();
    Archivo archivo_actual;// Objeto para identificar archivo actual

    public GUI() {
        initComponents();
        jl_nombre_archivo.setVisible(false);
        //Cargar Archivos a la lista de archivos
        File directoryPath = new File("./");
        //List text files only
        File[] files = directoryPath.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".txt");
            }
        });

        for (File file : files) {
            Archivo archivo_temp = new Archivo(file.getAbsolutePath());
            Lista_Archivos.add(archivo_temp);
            Lista_Archivos.get(Lista_Archivos.indexOf(archivo_temp)).setNombre_archivo(file.getName());//Asignar los nombres de archivo
            //Validara activaci√≥n de boton generarArchivo
            if (Lista_Archivos.get(Lista_Archivos.indexOf(archivo_temp)).getNombre_archivo().equals("PersonFile.txt")) {
                jb_RegistrosPruebas.setEnabled(false);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jd_crearCampo = new javax.swing.JDialog();
        jP_crearCampo = new javax.swing.JPanel();
        jl_CrearCampo = new javax.swing.JLabel();
        jl_NombredeCampo = new javax.swing.JLabel();
        jt_nombreCampo = new javax.swing.JTextField();
        jl_TipodeDato = new javax.swing.JLabel();
        cb_tipoCampo = new javax.swing.JComboBox<>();
        jl_Longitud = new javax.swing.JLabel();
        js_longitud = new javax.swing.JSpinner();
        jb_crearCampo = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jr_llaveSi = new javax.swing.JRadioButton();
        jr_llaveNo = new javax.swing.JRadioButton();
        jb_modCampo = new javax.swing.JButton();
        BgLlavePrimaria = new javax.swing.ButtonGroup();
        jd_abrirArchivo = new javax.swing.JDialog();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jT_Archivos = new javax.swing.JTree();
        jLabel1 = new javax.swing.JLabel();
        jb_abrirArchivo = new javax.swing.JButton();
        jb_salirAbrirArchivo = new javax.swing.JButton();
        jd_introducirRegistro = new javax.swing.JDialog();
        jP_introducirRegistro = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        tf_introducirRegistro = new javax.swing.JTextField();
        b_introducirRegistro = new javax.swing.JButton();
        jl_Registro = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jd_modificarRegistro = new javax.swing.JDialog();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        tf_modificarRegistro = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jd_buscarRegistro = new javax.swing.JDialog();
        TablaRegis_NoSeMuestra = new javax.swing.JFrame();
        jScrollPane4 = new javax.swing.JScrollPane();
        jt_Regis_NM = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jl_nombre_archivo = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTP_Menus = new javax.swing.JTabbedPane();
        jP_menuArchivo = new javax.swing.JPanel();
        B_Nuevo_Arch = new javax.swing.JButton();
        B_Abrir_Arch = new javax.swing.JButton();
        B_Salvar_Arch = new javax.swing.JButton();
        B_Cerrar_Arch = new javax.swing.JButton();
        B_Salir = new javax.swing.JButton();
        jb_RegistrosPruebas = new javax.swing.JButton();
        jp_Campos = new javax.swing.JPanel();
        B_Crear_Campo = new javax.swing.JButton();
        B_Listar_Campo = new javax.swing.JButton();
        B_Mod_Campo = new javax.swing.JButton();
        B_Borrar_Campo = new javax.swing.JButton();
        jP_tabla_ListarCampos = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table_ListarCampos = new javax.swing.JTable();
        jl_tituloCampos = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        B_Intro_Regis = new javax.swing.JButton();
        B_Modi_Regis = new javax.swing.JButton();
        B_Buscar_Regis = new javax.swing.JButton();
        B_Borrar_Regis = new javax.swing.JButton();
        B_Listar_Regis = new javax.swing.JButton();
        jp_Registro = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jt_Registro = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        B_Expor_Excel = new javax.swing.JButton();
        B_Expo_XML = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        B_Crear_Arch = new javax.swing.JButton();
        B_ReIndex_Arch = new javax.swing.JButton();

        jd_crearCampo.setTitle("Crear Campo");

        jl_CrearCampo.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jl_CrearCampo.setText("Crear Campo");

        jl_NombredeCampo.setText("Nombre de campo:");

        jt_nombreCampo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jt_nombreCampoActionPerformed(evt);
            }
        });

        jl_TipodeDato.setText("Tipo de dato:");

        cb_tipoCampo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-----", "String", "Int", "Double", "Float", "Char", "Boolean" }));
        cb_tipoCampo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_tipoCampoItemStateChanged(evt);
            }
        });

        jl_Longitud.setText("Longitud:");

        js_longitud.setModel(new javax.swing.SpinnerNumberModel(0, 0, 30, 1));

        jb_crearCampo.setText("Crear Campo");
        jb_crearCampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_crearCampoMouseClicked(evt);
            }
        });

        jLabel10.setText("Es llave primaria:");

        BgLlavePrimaria.add(jr_llaveSi);
        jr_llaveSi.setText("Si ");

        BgLlavePrimaria.add(jr_llaveNo);
        jr_llaveNo.setText("No");

        jb_modCampo.setText("Modificar Campo");
        jb_modCampo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_modCampoMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jP_crearCampoLayout = new javax.swing.GroupLayout(jP_crearCampo);
        jP_crearCampo.setLayout(jP_crearCampoLayout);
        jP_crearCampoLayout.setHorizontalGroup(
            jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_crearCampoLayout.createSequentialGroup()
                .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jP_crearCampoLayout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jl_NombredeCampo)
                            .addComponent(jl_TipodeDato))
                        .addGap(18, 18, 18)
                        .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cb_tipoCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jt_nombreCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(87, 87, 87)
                        .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jP_crearCampoLayout.createSequentialGroup()
                                .addComponent(jl_Longitud)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(js_longitud, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jP_crearCampoLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(18, 18, 18)
                                .addComponent(jr_llaveSi)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jr_llaveNo))))
                    .addGroup(jP_crearCampoLayout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jb_crearCampo)
                        .addGap(54, 54, 54)
                        .addComponent(jb_modCampo)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_crearCampoLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jl_CrearCampo)
                .addGap(248, 248, 248))
        );
        jP_crearCampoLayout.setVerticalGroup(
            jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_crearCampoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jl_CrearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jt_nombreCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_NombredeCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_Longitud)
                    .addComponent(js_longitud, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jP_crearCampoLayout.createSequentialGroup()
                        .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jl_TipodeDato)
                            .addComponent(cb_tipoCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(54, 54, 54)
                        .addGroup(jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jb_crearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jb_modCampo, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jP_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel10)
                        .addComponent(jr_llaveSi)
                        .addComponent(jr_llaveNo)))
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout jd_crearCampoLayout = new javax.swing.GroupLayout(jd_crearCampo.getContentPane());
        jd_crearCampo.getContentPane().setLayout(jd_crearCampoLayout);
        jd_crearCampoLayout.setHorizontalGroup(
            jd_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_crearCampoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jP_crearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jd_crearCampoLayout.setVerticalGroup(
            jd_crearCampoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_crearCampoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jP_crearCampo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Archivos");
        jT_Archivos.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jT_Archivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jT_ArchivosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jT_Archivos);

        jLabel1.setText("File Manager");

        jb_abrirArchivo.setText("Abrir");
        jb_abrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_abrirArchivoActionPerformed(evt);
            }
        });

        jb_salirAbrirArchivo.setText("Salir");
        jb_salirAbrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_salirAbrirArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jb_abrirArchivo)
                            .addComponent(jb_salirAbrirArchivo))))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jb_abrirArchivo)
                        .addGap(18, 18, 18)
                        .addComponent(jb_salirAbrirArchivo)))
                .addContainerGap(37, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jd_abrirArchivoLayout = new javax.swing.GroupLayout(jd_abrirArchivo.getContentPane());
        jd_abrirArchivo.getContentPane().setLayout(jd_abrirArchivoLayout);
        jd_abrirArchivoLayout.setHorizontalGroup(
            jd_abrirArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jd_abrirArchivoLayout.setVerticalGroup(
            jd_abrirArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jd_introducirRegistro.setMinimumSize(new java.awt.Dimension(260, 210));
        jd_introducirRegistro.setResizable(false);

        jLabel3.setText("Introducir Registro");

        javax.swing.GroupLayout jP_introducirRegistroLayout = new javax.swing.GroupLayout(jP_introducirRegistro);
        jP_introducirRegistro.setLayout(jP_introducirRegistroLayout);
        jP_introducirRegistroLayout.setHorizontalGroup(
            jP_introducirRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_introducirRegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(355, Short.MAX_VALUE))
        );
        jP_introducirRegistroLayout.setVerticalGroup(
            jP_introducirRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_introducirRegistroLayout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addContainerGap())
        );

        b_introducirRegistro.setText("Listo");
        b_introducirRegistro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                b_introducirRegistroMouseClicked(evt);
            }
        });

        jl_Registro.setText("Registro:");

        jLabel6.setText("Campos");

        javax.swing.GroupLayout jd_introducirRegistroLayout = new javax.swing.GroupLayout(jd_introducirRegistro.getContentPane());
        jd_introducirRegistro.getContentPane().setLayout(jd_introducirRegistroLayout);
        jd_introducirRegistroLayout.setHorizontalGroup(
            jd_introducirRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jd_introducirRegistroLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(b_introducirRegistro)
                .addGap(86, 86, 86))
            .addGroup(jd_introducirRegistroLayout.createSequentialGroup()
                .addGroup(jd_introducirRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jP_introducirRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jd_introducirRegistroLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jl_Registro)
                        .addGap(31, 31, 31)
                        .addComponent(tf_introducirRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jd_introducirRegistroLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jd_introducirRegistroLayout.setVerticalGroup(
            jd_introducirRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_introducirRegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jP_introducirRegistro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(166, 166, 166)
                .addGroup(jd_introducirRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_introducirRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jl_Registro))
                .addGap(18, 18, 18)
                .addComponent(b_introducirRegistro)
                .addGap(81, 81, 81))
        );

        jd_modificarRegistro.setMinimumSize(new java.awt.Dimension(501, 320));
        jd_modificarRegistro.setResizable(false);

        jLabel4.setText("Modificar Registro");

        jLabel5.setText("jLabel5");

        jButton1.setText("Listo");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jd_modificarRegistroLayout = new javax.swing.GroupLayout(jd_modificarRegistro.getContentPane());
        jd_modificarRegistro.getContentPane().setLayout(jd_modificarRegistroLayout);
        jd_modificarRegistroLayout.setHorizontalGroup(
            jd_modificarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_modificarRegistroLayout.createSequentialGroup()
                .addGroup(jd_modificarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jd_modificarRegistroLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jd_modificarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(tf_modificarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jd_modificarRegistroLayout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(133, Short.MAX_VALUE))
        );
        jd_modificarRegistroLayout.setVerticalGroup(
            jd_modificarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jd_modificarRegistroLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(35, 35, 35)
                .addComponent(tf_modificarRegistro, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jButton1)
                .addContainerGap(90, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jd_buscarRegistroLayout = new javax.swing.GroupLayout(jd_buscarRegistro.getContentPane());
        jd_buscarRegistro.getContentPane().setLayout(jd_buscarRegistroLayout);
        jd_buscarRegistroLayout.setHorizontalGroup(
            jd_buscarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jd_buscarRegistroLayout.setVerticalGroup(
            jd_buscarRegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        jt_Regis_NM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jt_Regis_NM);
        if (jt_Regis_NM.getColumnModel().getColumnCount() > 0) {
            jt_Regis_NM.getColumnModel().getColumn(0).setResizable(false);
            jt_Regis_NM.getColumnModel().getColumn(1).setResizable(false);
            jt_Regis_NM.getColumnModel().getColumn(2).setResizable(false);
            jt_Regis_NM.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout TablaRegis_NoSeMuestraLayout = new javax.swing.GroupLayout(TablaRegis_NoSeMuestra.getContentPane());
        TablaRegis_NoSeMuestra.getContentPane().setLayout(TablaRegis_NoSeMuestraLayout);
        TablaRegis_NoSeMuestraLayout.setHorizontalGroup(
            TablaRegis_NoSeMuestraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TablaRegis_NoSeMuestraLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(151, Short.MAX_VALUE))
        );
        TablaRegis_NoSeMuestraLayout.setVerticalGroup(
            TablaRegis_NoSeMuestraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TablaRegis_NoSeMuestraLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Standard File Manager");

        jl_nombre_archivo.setText("jlabel");

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        jLabel2.setText("Standard File Manager");

        jTP_Menus.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTP_MenusStateChanged(evt);
            }
        });

        B_Nuevo_Arch.setText("Nuevo Archivo");
        B_Nuevo_Arch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_Nuevo_ArchActionPerformed(evt);
            }
        });

        B_Abrir_Arch.setText("Abrir Archivo");
        B_Abrir_Arch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_Abrir_ArchActionPerformed(evt);
            }
        });

        B_Salvar_Arch.setText("Salvar Archivo");
        B_Salvar_Arch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_Salvar_ArchActionPerformed(evt);
            }
        });

        B_Cerrar_Arch.setText("Cerrar Archivo");
        B_Cerrar_Arch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_Cerrar_ArchActionPerformed(evt);
            }
        });

        B_Salir.setText("Salir");
        B_Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                B_SalirActionPerformed(evt);
            }
        });

        jb_RegistrosPruebas.setText("Crear Pruebas");
        jb_RegistrosPruebas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jb_RegistrosPruebasMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jP_menuArchivoLayout = new javax.swing.GroupLayout(jP_menuArchivo);
        jP_menuArchivo.setLayout(jP_menuArchivoLayout);
        jP_menuArchivoLayout.setHorizontalGroup(
            jP_menuArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_menuArchivoLayout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(jP_menuArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(B_Salir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(B_Nuevo_Arch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(B_Abrir_Arch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(B_Salvar_Arch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(B_Cerrar_Arch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jb_RegistrosPruebas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(448, Short.MAX_VALUE))
        );
        jP_menuArchivoLayout.setVerticalGroup(
            jP_menuArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_menuArchivoLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(B_Nuevo_Arch)
                .addGap(44, 44, 44)
                .addComponent(B_Abrir_Arch)
                .addGap(42, 42, 42)
                .addComponent(B_Salvar_Arch)
                .addGap(37, 37, 37)
                .addComponent(B_Cerrar_Arch)
                .addGap(36, 36, 36)
                .addComponent(jb_RegistrosPruebas)
                .addGap(33, 33, 33)
                .addComponent(B_Salir)
                .addContainerGap(117, Short.MAX_VALUE))
        );

        jTP_Menus.addTab("Archivo", jP_menuArchivo);

        B_Crear_Campo.setText("Crear Campo");
        B_Crear_Campo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Crear_CampoMouseClicked(evt);
            }
        });

        B_Listar_Campo.setText("Listar Campos");
        B_Listar_Campo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Listar_CampoMouseClicked(evt);
            }
        });

        B_Mod_Campo.setText("Modificar Campo");
        B_Mod_Campo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Mod_CampoMouseClicked(evt);
            }
        });

        B_Borrar_Campo.setText("Borrar Campo");
        B_Borrar_Campo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Borrar_CampoMouseClicked(evt);
            }
        });

        table_ListarCampos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo de Dato", "Longitud", "Es llave primaria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table_ListarCampos);

        jl_tituloCampos.setText("Campo");

        javax.swing.GroupLayout jP_tabla_ListarCamposLayout = new javax.swing.GroupLayout(jP_tabla_ListarCampos);
        jP_tabla_ListarCampos.setLayout(jP_tabla_ListarCamposLayout);
        jP_tabla_ListarCamposLayout.setHorizontalGroup(
            jP_tabla_ListarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_tabla_ListarCamposLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jP_tabla_ListarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jP_tabla_ListarCamposLayout.createSequentialGroup()
                        .addComponent(jl_tituloCampos)
                        .addContainerGap(382, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
        );
        jP_tabla_ListarCamposLayout.setVerticalGroup(
            jP_tabla_ListarCamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_tabla_ListarCamposLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jl_tituloCampos)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        javax.swing.GroupLayout jp_CamposLayout = new javax.swing.GroupLayout(jp_Campos);
        jp_Campos.setLayout(jp_CamposLayout);
        jp_CamposLayout.setHorizontalGroup(
            jp_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_CamposLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jp_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(B_Borrar_Campo)
                    .addComponent(B_Mod_Campo)
                    .addComponent(B_Listar_Campo)
                    .addComponent(B_Crear_Campo))
                .addContainerGap(489, Short.MAX_VALUE))
            .addGroup(jp_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp_CamposLayout.createSequentialGroup()
                    .addContainerGap(208, Short.MAX_VALUE)
                    .addComponent(jP_tabla_ListarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        jp_CamposLayout.setVerticalGroup(
            jp_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_CamposLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(B_Crear_Campo)
                .addGap(47, 47, 47)
                .addComponent(B_Listar_Campo)
                .addGap(47, 47, 47)
                .addComponent(B_Mod_Campo)
                .addGap(44, 44, 44)
                .addComponent(B_Borrar_Campo)
                .addContainerGap(277, Short.MAX_VALUE))
            .addGroup(jp_CamposLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jp_CamposLayout.createSequentialGroup()
                    .addContainerGap(9, Short.MAX_VALUE)
                    .addComponent(jP_tabla_ListarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(207, Short.MAX_VALUE)))
        );

        jTP_Menus.addTab("Campos", jp_Campos);

        B_Intro_Regis.setText("Introducir Registros");
        B_Intro_Regis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Intro_RegisMouseClicked(evt);
            }
        });

        B_Modi_Regis.setText("Modificar Registros");
        B_Modi_Regis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Modi_RegisMouseClicked(evt);
            }
        });

        B_Buscar_Regis.setText("Buscar Registros");
        B_Buscar_Regis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Buscar_RegisMouseClicked(evt);
            }
        });

        B_Borrar_Regis.setText("Borrar Registros");
        B_Borrar_Regis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Borrar_RegisMouseClicked(evt);
            }
        });

        B_Listar_Regis.setText("Listar Registros");
        B_Listar_Regis.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Listar_RegisMouseClicked(evt);
            }
        });

        jt_Registro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(jt_Registro);

        javax.swing.GroupLayout jp_RegistroLayout = new javax.swing.GroupLayout(jp_Registro);
        jp_Registro.setLayout(jp_RegistroLayout);
        jp_RegistroLayout.setHorizontalGroup(
            jp_RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_RegistroLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        jp_RegistroLayout.setVerticalGroup(
            jp_RegistroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_RegistroLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(B_Listar_Regis)
                    .addComponent(B_Borrar_Regis)
                    .addComponent(B_Buscar_Regis)
                    .addComponent(B_Modi_Regis)
                    .addComponent(B_Intro_Regis))
                .addGap(18, 18, 18)
                .addComponent(jp_Registro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jp_Registro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(B_Intro_Regis)
                        .addGap(41, 41, 41)
                        .addComponent(B_Modi_Regis)
                        .addGap(48, 48, 48)
                        .addComponent(B_Buscar_Regis)
                        .addGap(50, 50, 50)
                        .addComponent(B_Borrar_Regis)
                        .addGap(57, 57, 57)
                        .addComponent(B_Listar_Regis)))
                .addContainerGap(145, Short.MAX_VALUE))
        );

        jTP_Menus.addTab("Registros", jPanel5);

        B_Expor_Excel.setText("Expotar Excel");
        B_Expor_Excel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Expor_ExcelMouseClicked(evt);
            }
        });

        B_Expo_XML.setText("Exportar XML con Schema");
        B_Expo_XML.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Expo_XMLMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(B_Expo_XML)
                    .addComponent(B_Expor_Excel))
                .addContainerGap(437, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(B_Expor_Excel)
                .addGap(51, 51, 51)
                .addComponent(B_Expo_XML)
                .addContainerGap(407, Short.MAX_VALUE))
        );

        jTP_Menus.addTab("Estandarizacion", jPanel7);

        B_Crear_Arch.setText("Crear Indice");
        B_Crear_Arch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_Crear_ArchMouseClicked(evt);
            }
        });

        B_ReIndex_Arch.setText("Re Indexar Archivos");
        B_ReIndex_Arch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                B_ReIndex_ArchMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(B_ReIndex_Arch)
                    .addComponent(B_Crear_Arch))
                .addContainerGap(474, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(B_Crear_Arch)
                .addGap(60, 60, 60)
                .addComponent(B_ReIndex_Arch)
                .addContainerGap(404, Short.MAX_VALUE))
        );

        jTP_Menus.addTab("Indices", jPanel6);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(263, 263, 263)
                        .addComponent(jLabel2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jTP_Menus, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(102, 102, 102)
                    .addComponent(jl_nombre_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(500, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel2)
                .addGap(40, 40, 40)
                .addComponent(jTP_Menus, javax.swing.GroupLayout.PREFERRED_SIZE, 581, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(69, 69, 69)
                    .addComponent(jl_nombre_archivo, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(589, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 709, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 697, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 686, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 674, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void B_Crear_CampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Crear_CampoMouseClicked

        if (B_Crear_Campo.isEnabled()) {
            jt_nombreCampo.setEnabled(true);
            cb_tipoCampo.setEnabled(true);
            jb_crearCampo.setVisible(true);
            jr_llaveNo.setEnabled(true);
            jr_llaveSi.setEnabled(true);
            jb_modCampo.setVisible(false);
            jl_Longitud.setEnabled(true);
            BgLlavePrimaria.clearSelection();

            jd_crearCampo.setModal(true);
            jd_crearCampo.pack();
            jd_crearCampo.setLocationRelativeTo(this);
            jd_crearCampo.setVisible(true);
        }

    }//GEN-LAST:event_B_Crear_CampoMouseClicked

    private void B_Listar_CampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Listar_CampoMouseClicked

        if (archivo_actual.getLista_campos().isEmpty()) {
            JOptionPane.showMessageDialog(jp_Campos, "No existe ningun campo en este archivo.");
        } else {
            jP_tabla_ListarCampos.setVisible(true);
            refrescarTabla();
        }


    }//GEN-LAST:event_B_Listar_CampoMouseClicked

    private void B_Mod_CampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Mod_CampoMouseClicked

        if (B_Mod_Campo.isEnabled()) {
            if (table_ListarCampos.getSelectedRow() != -1) {

                String tipoDato = (String) table_ListarCampos.getValueAt(table_ListarCampos.getSelectedRow(), 1);
                campo_seleccionado = table_ListarCampos.getSelectedRow();
                Campo campoMod = archivo_actual.getLista_campos().get(campo_seleccionado);

                jb_modCampo.setVisible(true);
                jb_crearCampo.setVisible(false);
                jl_CrearCampo.setText("Editar Campo");
                //Set nombre
                jt_nombreCampo.setText(campoMod.getNombre_Campo());
                //Set el tipo
                if (campoMod.getTipo_dato().equals("string")) {
                    cb_tipoCampo.setSelectedIndex(1);
                } else if (campoMod.getTipo_dato().equals("int")) {
                    cb_tipoCampo.setSelectedIndex(2);
                } else if (campoMod.getTipo_dato().equals("double")) {
                    cb_tipoCampo.setSelectedIndex(3);
                } else if (campoMod.getTipo_dato().equals("float")) {
                    cb_tipoCampo.setSelectedIndex(4);
                } else {
                    //El tipo de dato es un char
                    cb_tipoCampo.setSelectedIndex(5);
                }
                //Set longitud
                js_longitud.setValue((int) campoMod.getLongitud());

                //Set Si es llave primaria o no
                jr_llaveSi.setEnabled(true);
                jr_llaveNo.setEnabled(true);
                if (campoMod.isEsLlavePrimaria()) {
                    jr_llaveSi.setSelected(true);
                    jr_llaveNo.setSelected(false);
                } else {
                    jr_llaveSi.setSelected(false);
                    jr_llaveNo.setSelected(true);
                }

                jd_crearCampo.setModal(true);
                jd_crearCampo.pack();
                jd_crearCampo.setLocationRelativeTo(this);
                jd_crearCampo.setVisible(true);
                table_ListarCampos.clearSelection();
            } else {
                JOptionPane.showMessageDialog(this, "No selecciono un campo en la tabla");
            }
        }
    }//GEN-LAST:event_B_Mod_CampoMouseClicked

    private void B_Borrar_CampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Borrar_CampoMouseClicked

        if (B_Borrar_Campo.isEnabled()) {
            if (table_ListarCampos.getSelectedRow() != -1) {

                DefaultTableModel modelo = (DefaultTableModel) table_ListarCampos.getModel();
                int index = table_ListarCampos.getSelectedRow();

                int opcion_eliminar = JOptionPane.showConfirmDialog(jp_Campos, "¬øEsta seguro que quiere eliminar el campo?",
                        "Eliminar Campo", JOptionPane.YES_NO_OPTION);
                if (opcion_eliminar == 0) {
                    //Selecciono SI el usuario
                    modelo.removeRow(index);
                    archivo_actual.getLista_campos().remove(index);
                    archivo_actual.setGuardado(false);//Archivo se debe salvar
                    JOptionPane.showMessageDialog(jp_Campos, "El campo se ha eliminado de la tabla correctamente");

                    //Preguntar si quiere guardar los cambios
                    if (!archivo_actual.isGuardado()) {
                        //Archivo no esta guardado
                        int resultado = JOptionPane.showConfirmDialog(jP_menuArchivo, "No ha guardado el archivo actual\n¬øDesea guardarlo?"
                                + "", "Cerrar Archivo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                        if (resultado == 0) {
                            //Ingresa SI el usuario
                            //Verificar si el archivo es nuevo o si ya ha sido utilizado y guardado antes
                            if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                                B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                            } else {
                                //Solo se guarda el archivo ya existente
                                escribirArchivo(archivo_actual);
                                JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha guardado exitosamente!");
                            }
                        } else {
                            //Ingresa NO el usuario 
                            JOptionPane.showMessageDialog(jP_menuArchivo, "No se guardaron los datos del archivo: " + archivo_actual.getNombre_archivo() + " .");
                        }
                    } else {
                        //Archivo esta guardado
                    }
                } else {
                    //Selecciono NO el usuario
                    JOptionPane.showMessageDialog(jp_Campos, "No se elimino el campo.");
                }
            } else {
                JOptionPane.showMessageDialog(this, "No selecciono un campo en la tabla");
            }
        }
    }//GEN-LAST:event_B_Borrar_CampoMouseClicked

    private void jT_ArchivosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jT_ArchivosMouseClicked
        // TODO add your handling code here:

        if ((DefaultMutableTreeNode) jT_Archivos.getLastSelectedPathComponent() == null) {
            nodo_seleccionado = null;
        } else {
            nodo_seleccionado = (DefaultMutableTreeNode) jT_Archivos.getSelectionPath().getLastPathComponent();
        }

    }//GEN-LAST:event_jT_ArchivosMouseClicked

    private void jb_abrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_abrirArchivoActionPerformed
        //Abrir el archivo mediante el nodo del Jtree seleccionado

        boolean confirm_open = false;

        if (nodo_seleccionado == null) {
            JOptionPane.showMessageDialog(jd_abrirArchivo, "No se ha seleccionado ningun archivo.");
            confirm_open = false;
        } else if (nodo_seleccionado == jT_Archivos.getModel().getRoot()) {
            JOptionPane.showMessageDialog(jd_abrirArchivo, "No se puede seleccionar la raiz de los archivos");
            confirm_open = false;
        } else if (nodo_seleccionado.getUserObject() == archivo_actual) {
            JOptionPane.showMessageDialog(jd_abrirArchivo, "El archivo seleccionado ya esta abierto.");
        } else {
            //Se selecciono un archivo
            if (archivo_actual == null) {
                //No hay otro archivo abierto
                confirm_open = true;
            } else {
                //Hay un archivo abierto
                int resultado = JOptionPane.showConfirmDialog(jP_menuArchivo, "El archivo '" + archivo_actual.getNombre_archivo()
                        + "' esta abierto\n¬øDesea guardarlo para cerrarlo?", "Abrir Archivo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (resultado == 0) {
                    //Ingresa SI el usuario
                    //Llevar a opcion de salvar archivo
                    if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                        //Primera ves que se guarda un nuevo archivo
                        B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                    } else {//Ya existia el archivo
                        escribirArchivo(archivo_actual);
                        JOptionPane.showMessageDialog(jd_abrirArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha guardado exitosamente!");
                        JOptionPane.showMessageDialog(jd_abrirArchivo, "!El archivo: " + archivo_actual.getNombre_archivo() + " se ha cerrado correctamente!");
                    }

                    confirm_open = true;
                } else {
                    //Ingresa NO el usuario
                    if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                        //si el archivo no se ha guardado antes e ingreso NO, Se pierden los datos
                        Lista_Archivos.remove(archivo_actual);
                        refrescarJTree();
                        archivo_actual = null;
                    }
                    //El archivo abierto no se guardara antes que de abrir uno nuevo
                    if (archivo_actual == null) {
                        JOptionPane.showMessageDialog(jd_abrirArchivo, "No se guardo el ' nuevo archivo ' .");
                    } else {
                        JOptionPane.showMessageDialog(jd_abrirArchivo, "No se guardo el archivo: " + archivo_actual.getNombre_archivo());
                    }

                    confirm_open = true;
                }
            }
        }

        if (confirm_open) {
            archivo_actual = null;
            archivo_actual = (Archivo) nodo_seleccionado.getUserObject();
            JOptionPane.showMessageDialog(jd_abrirArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha abierto exitosamente!");
            jl_nombre_archivo.setText(archivo_actual.getNombre_archivo());
            archivo_actual.setGuardado(false);
            jl_nombre_archivo.setVisible(true);
            jd_abrirArchivo.dispose();

            //Leer campos y agregarlos a la lista de campos del archivo
            Scanner sc;
            ArrayList<String> buffer = new ArrayList();
            int sizeCampos;
            String var1;
            try {
                sc = new Scanner(archivo_actual.getArchivo());
                var1 = sc.next();
                var1 = var1.replace('\0', ' ');//Quitar caracteres null
                var1 = var1.replaceAll("\\s+", "");

                sizeCampos = Integer.parseInt(var1);

                for (int i = 0; i < sizeCampos; i++) {

                    String cadena = sc.next();
                    cadena = cadena.replace('\0', ' ');//Quitar caracteres null
                    cadena = cadena.replaceAll("\\s+", "");
                    cadena = cadena.substring(1, cadena.length() - 1);
                    buffer.add(cadena);
                }
            } catch (Exception e) {
            }

            Scanner parse;
            ArrayList<String> tokens = new ArrayList();

            for (int i = 0; i < buffer.size(); i++) {
                String var = buffer.get(i);
                parse = new Scanner(var);
                parse.useDelimiter(",");
                while (parse.hasNext()) {
                    tokens.add(parse.next());
                }
                parse.reset();
            }
            buffer.clear();

            for (int i = 0; i < tokens.size(); i++) {
                parse = new Scanner(tokens.get(i));
                parse.useDelimiter(":");
                while (parse.hasNext()) {
                    parse.next();
                    buffer.add(parse.next());
                }
            }

            int index = buffer.size() / 4;
            String nombre = "", tipo = "";
            int longitud = 0;
            String esLlave = "";
            int flag = 0, secondaryFlag = 0;

            archivo_actual.getLista_campos().clear();

            while (flag < index) {
                nombre = buffer.get(secondaryFlag);
                secondaryFlag++;

                tipo = buffer.get(secondaryFlag);
                secondaryFlag++;

                longitud = Integer.parseInt(buffer.get(secondaryFlag));
                secondaryFlag++;

                esLlave = buffer.get(secondaryFlag);
                secondaryFlag++;

                Campo campo = new Campo(nombre, tipo, longitud);

                if (esLlave.equals("true")) {
                    campo.setEsLlavePrimaria(true);
                }
                archivo_actual.getLista_campos().add(campo);
                flag++;
            }

            //Verificar numero de registros para habilitar opciones de campos
            int verificar_registro = actualizar_numRegistros(1);
            if (verificar_registro == 0) {
                B_Crear_Campo.setEnabled(true);
                B_Mod_Campo.setEnabled(true);
                B_Borrar_Campo.setEnabled(true);
            } else {
                //Ya existe minimo 1 registro, desabilitar funciones de campos
                B_Crear_Campo.setEnabled(false);
                B_Mod_Campo.setEnabled(false);
                B_Borrar_Campo.setEnabled(false);
            }
            //Recrear AvailList si es necesario
            recreacion_AvailList(archivo_actual);
        }
    }//GEN-LAST:event_jb_abrirArchivoActionPerformed

    private void jb_salirAbrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_salirAbrirArchivoActionPerformed
        //Cerrar JDialog para abrir archivo
        jd_abrirArchivo.dispose();
    }//GEN-LAST:event_jb_salirAbrirArchivoActionPerformed

    private void B_Nuevo_ArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_Nuevo_ArchActionPerformed
        //Creacion de un nuevo archivo vacio
        //Verificacion si hay un archivo abierto
        if (archivo_actual == null) {
            //do nothing
        } else {
            //Hay un archivo abierto, preguntar si lo quiere guardar para cerrarlo
            int resultado_guardar = JOptionPane.showConfirmDialog(jP_menuArchivo, "No ha guardado el archivo actual\n¬øDesea guardarlo?"
                    + "", "Salir", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            //Llevar a metodo salvar archivo 
            if (resultado_guardar == 0) {
                //Selecciono SI
                if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                    //Es la primera vez que se guarda el archivo
                    B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                } else {
                    //El archivo ya se ha guardado previamente
                    escribirArchivo(archivo_actual);
                }
            } else {
                //Selecciono NO
                if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                    Lista_Archivos.remove(archivo_actual);
                }
                JOptionPane.showMessageDialog(jP_menuArchivo, "No se guardo el archivo: '" + archivo_actual.getNombre_archivo() + "'.");
                archivo_actual = null;

            }
        }

        JOptionPane.showMessageDialog(jP_menuArchivo, "cargando...");
        Archivo archivo_nuevo = new Archivo("./nuevo_archivo.txt");
        Lista_Archivos.add(archivo_nuevo);
        archivo_actual = archivo_nuevo;
        JOptionPane.showMessageDialog(jP_menuArchivo, "Se ha creado el  archivo exitosamente",
                "nuevo archivo", JOptionPane.INFORMATION_MESSAGE);
        //Agregar el nombre del documento en la pantalla principal
        jl_nombre_archivo.setText(archivo_actual.getNombre_archivo());
        jl_nombre_archivo.setVisible(true);
        //Refrescar JTree Archivos
        refrescarJTree();
    }//GEN-LAST:event_B_Nuevo_ArchActionPerformed

    private void B_Abrir_ArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_Abrir_ArchActionPerformed
        //Abrir ventana para abrir archivo
        if (Lista_Archivos.isEmpty()) {
            JOptionPane.showMessageDialog(jP_menuArchivo, "No hay ningun archivo en el sistema.",
                    "Advertencia Abrir Archivo", JOptionPane.WARNING_MESSAGE);
        } else {
            nodo_seleccionado = null;
            refrescarJTree();
            jd_abrirArchivo.setModal(true);
            jd_abrirArchivo.pack();
            jd_abrirArchivo.setLocationRelativeTo(this);
            jd_abrirArchivo.setVisible(true);
        }

    }//GEN-LAST:event_B_Abrir_ArchActionPerformed

    private void B_Salvar_ArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_Salvar_ArchActionPerformed
        //Metodo salvar archivo
        String nombre_archivo = null;
        boolean confirm_name = false;
        boolean confirm_save = false;

        if (archivo_actual != null) {
            //Revisar si el archivo ya esta guardado
            if (archivo_actual.isGuardado()) {
                JOptionPane.showMessageDialog(jP_menuArchivo, "El archivo: '" + archivo_actual.getNombre_archivo()
                        + "' ya esta guardado.");
            } else {
                //El archivo no esta guardado
                //Revisar si el archivo ya tiene un nombre guardado
                if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                    //No tiene un nombre guardado, significando salvar por 1era vez el archivo
                    while (!confirm_name) {
                        nombre_archivo = JOptionPane.showInputDialog(jP_menuArchivo, "Ingrese el nombre del archivo: ",
                                "Salvar Archivo", JOptionPane.DEFAULT_OPTION);

                        if (nombre_archivo != null) {
                            //El usuario ingreso el nombre del archivo
                            //No se puede utilizar el nombre "nuevo documento" ya que es el nombre base
                            if (nombre_archivo.equals("nuevo archivo")) {
                                JOptionPane.showMessageDialog(jP_menuArchivo, "No se puede utilizar el nombre 'nuevo archivo\n'"
                                        + "por decision del desarrolador.");
                            } else {
                                confirm_name = true;
                            }

                            if (confirm_name) {
                                //Si pasa la primera validacion puede ir a la segunda validacion
                                //Revisar validaciones para el nombre
                                if (nombre_archivo.contains(".")) {
                                    //El archivo no puede llevar un punto
                                    JOptionPane.showMessageDialog(jP_menuArchivo, "El Archivo no puede incluir un '.'",
                                            "Advertencia", JOptionPane.WARNING_MESSAGE);
                                    confirm_name = false;
                                } else {
                                    confirm_name = true;
                                }
                                if (confirm_name) {
                                    //Revisar que el nombre no sea igual a otro archivo
                                    nombre_archivo = nombre_archivo + ".txt";
                                    for (int i = 0; i < Lista_Archivos.size(); i++) {
                                        if (nombre_archivo.equals(Lista_Archivos.get(i).getNombre_archivo())) {
                                            //El nombre se repite
                                            JOptionPane.showMessageDialog(jP_menuArchivo, "El nombre " + nombre_archivo + " ya esta siendo "
                                                    + "utilizado para otro archivo", "Advertencia", JOptionPane.WARNING_MESSAGE);
                                            confirm_name = false;
                                            break;
                                        } else {
                                            confirm_name = true;
                                        }
                                    }
                                }
                            }
                            //Confirmacion de dato
                            if (confirm_name) {
                                archivo_actual.setNombre_archivo(nombre_archivo);
                                archivo_actual.setArchivo("./" + nombre_archivo);
                                confirm_save = true;
                            }
                        } else {
                            //do nothing, eligio la opcion cancelar
                            confirm_name = true;
                            confirm_save = false;
                        }
                    }
                } else {
                    //El archivo ya tiene nombre propio y se ha guardado minimo 1 vez
                    int opcion_save = JOptionPane.showConfirmDialog(jP_menuArchivo, "¬øDesea guardar el archivo "
                            + archivo_actual.getNombre_archivo() + "?", "Salvar Archivo", JOptionPane.YES_NO_OPTION);
                    if (opcion_save == 0) {
                        //Selecciono SI el usuario
                        confirm_save = true;
                    } else {
                        //Selecciono NO el usuario
                        confirm_save = false;
                    }
                }
                //Guardar si se ha confirmado por medio de las validaciones
                if (confirm_save == true) {
                    //Escribir el archivo
                    escribirArchivo(archivo_actual);
                    JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo se ha guardado exitosamente!");
                    archivo_actual.setGuardado(true);
                    jl_nombre_archivo.setText(archivo_actual.getNombre_archivo());
                    //Refrescar JTree
                    refrescarJTree();
                } else {/*No se guarda el programa, do nothing*/
                }
            }

        } else {
            //No hay un archivo siendo utilizado
            JOptionPane.showMessageDialog(jP_menuArchivo, "No se esta utilizando ningun archivo.\n", "Advertencia",
                    JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_B_Salvar_ArchActionPerformed

    private void B_Cerrar_ArchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_Cerrar_ArchActionPerformed
        //Metodo cerrar archivo
        boolean confirm_cerrar = false;
        if (archivo_actual != null) {
            //Hay un archivo abierto
            if (!archivo_actual.isGuardado()) {
                //Archivo no esta guardado
                int resultado = JOptionPane.showConfirmDialog(jP_menuArchivo, "No ha guardado el archivo actual\n¬øDesea guardarlo?"
                        + "", "Cerrar Archivo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (resultado == 0) {
                    //Ingresa SI el usuario
                    //Verificar si el archivo es nuevo o si ya ha sido utilizado y guardado antes
                    if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                        B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                    } else {
                        //Solo se guarda el archivo ya existente
                        escribirArchivo(archivo_actual);
                        JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha guardado exitosamente!");
                    }

                    confirm_cerrar = true;
                } else {
                    //Ingresa NO el usuario 
                    JOptionPane.showMessageDialog(jP_menuArchivo, "No se guardaron los datos del archivo: " + archivo_actual.getNombre_archivo() + " .",
                            "Cerrar Archivo", JOptionPane.DEFAULT_OPTION);
                    confirm_cerrar = true;
                }
            } else {
                //Archivo esta guardado
                confirm_cerrar = true;
            }
        } else {
            //No hay un archivo abierto por el momento
            JOptionPane.showMessageDialog(jP_menuArchivo, "No hay ningun archivo abierto actualmente."
                    + "\nNo puede hacer uso de esta funci√≥n.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }
        //Cerrar Archivo
        if (confirm_cerrar) {
            archivo_actual = null;
            jl_nombre_archivo.setVisible(false);
            JOptionPane.showMessageDialog(jP_menuArchivo, "Se ha cerrado el archivo correctamente."
                    + "", "Cerrar Archivo", JOptionPane.DEFAULT_OPTION);
            //Ocultar tabla
            jP_tabla_ListarCampos.setVisible(false);
        }
    }//GEN-LAST:event_B_Cerrar_ArchActionPerformed

    private void B_SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_B_SalirActionPerformed
        //Metodo salir
        boolean confirmar_salir = false;
        if (archivo_actual != null && !archivo_actual.isGuardado()) {
            //Se esta usando un archivo y no esta guardado
            int resultado = JOptionPane.showConfirmDialog(jP_menuArchivo, "No ha guardado el archivo actual: " + archivo_actual.getNombre_archivo() + "\n¬øDesea guardarlo?"
                    + "", "Salir", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (resultado == 0) {
                //Ingresa SI el usuario
                //Verificar si el archivo es nuevo o si ya ha sido guardado, llevar a opcion de salvar archivo
                if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                    B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                } else {
                    //El archivo no es nuevo
                    JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha guardado exitosamente!");
                    JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo: " + archivo_actual.getNombre_archivo() + " se ha cerrado correctamente!");
                    escribirArchivo(archivo_actual);
                    archivo_actual = null;
                }
                confirmar_salir = true;
            } else {
                //Ingresa NO el usuario
                confirmar_salir = true;
            }
        } else {
            confirmar_salir = true;
        }

        if (confirmar_salir) {
            int resultado_salir = JOptionPane.showConfirmDialog(jP_menuArchivo, "¬øEsta seguro de salir?"
                    + "", "Salir", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
            if (resultado_salir == 0) { // Ingreso SI el usuario
                JOptionPane.showMessageDialog(jP_menuArchivo, "Hasta Luego.", "Salir", JOptionPane.PLAIN_MESSAGE);
                System.exit(0);
            } else {//Ingreso NO el usuario
                //do nothing
            }
        }
    }//GEN-LAST:event_B_SalirActionPerformed

    private void jTP_MenusStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTP_MenusStateChanged
        //Cambio de Tab
        int indice_menu = jTP_Menus.getSelectedIndex();
        if (archivo_actual == null && indice_menu > 0) {
            jTP_Menus.setSelectedIndex(0);
            JOptionPane.showMessageDialog(jP_menuArchivo, "No hay archivos en el sistema.\n"
                    + "Debe abrir o crear un nuevo archivo para acceder al resto de funciones.");
        }

        if (archivo_actual != null) {
            jP_tabla_ListarCampos.setVisible(false);
            jp_Registro.setVisible(false);
        }
    }//GEN-LAST:event_jTP_MenusStateChanged

    private void jb_crearCampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_crearCampoMouseClicked

        boolean confirmar_crearCampo = false;
        boolean continuar_addCampo = true;
        Campo nuevoCampo = new Campo();

        //El usuario puede agregar los campo que desee
        confirmar_crearCampo = false;
        //Validar entradas de datos
        //Validar nombre de campo
        if (jt_nombreCampo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(jd_crearCampo, "!No puede dejar en blanco el nombre del campo!");
            confirmar_crearCampo = false;
        } else {
            confirmar_crearCampo = true;
            nuevoCampo.setNombre_Campo(jt_nombreCampo.getText());
        }

        //Validar Tipo de Dato
        if (cb_tipoCampo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(jd_crearCampo, "Debe elegir el tipo del dato.");
            confirmar_crearCampo = false;
        } else {
            int opcion = cb_tipoCampo.getSelectedIndex();
            //Agregar el tipo de dato que selecciono el usuario
            switch (opcion) {
                case 1:
                    //Eligio String
                    nuevoCampo.setTipo_dato("String");
                    break;
                case 2:
                    //Eligio Int
                    nuevoCampo.setTipo_dato("int");
                    break;
                case 3:
                    //Eligio Double
                    nuevoCampo.setTipo_dato("double");
                    break;
                case 4:
                    //Eligio Float
                    nuevoCampo.setTipo_dato("float");
                    break;
                case 5:
                    //Eligio Char
                    nuevoCampo.setTipo_dato("char");
                    nuevoCampo.setLongitud(1);
                    break;
                case 6:
                    //Eligio boolean
                    nuevoCampo.setTipo_dato("boolean");
                    break;
                default:
                    break;
            }
            confirmar_crearCampo = true;

        }
        //Longitud de un char solo puede ser 1
        if (nuevoCampo.getTipo_dato().equals("char") && (int) js_longitud.getValue() != 1) {
            JOptionPane.showMessageDialog(jd_crearCampo, "El tipo de dato 'char' solo puede tener una longitud de 1.");
            confirmar_crearCampo = false;
        }

        //Validar Longitud
        if ((int) js_longitud.getValue() == 0 || (int) js_longitud.getValue() > 30) {
            JOptionPane.showMessageDialog(jd_crearCampo, "La longitud del campo debe ser mayor a 0.");
            confirmar_crearCampo = false;
        } else {
            confirmar_crearCampo = true;
            nuevoCampo.setLongitud((int) js_longitud.getValue());
        }

        //Validar Si es llave primaria
        //Recuperamos la eleccion de marcar como llave primaria
        boolean esllavePrimaria = false;

        if (!jr_llaveNo.isSelected() && !jr_llaveSi.isSelected()) {
            //No selecciono sobre la opcion si el campo es llave primaria
            JOptionPane.showMessageDialog(jd_crearCampo, "Debe elegir si el campo es una llave primaria o no.");
            confirmar_crearCampo = false;
        } else {
            if (jr_llaveSi.isSelected() || jr_llaveNo.isSelected()) {
                if (jr_llaveSi.isSelected()) {
                    esllavePrimaria = true;
                } else {
                    esllavePrimaria = false;
                }
            }
            confirmar_crearCampo = true;
        }

        //Busqueda para verificar que no haya otra llave primaria
        if (archivo_actual.getLista_campos().isEmpty()) {
            //La lista de campos esta vacia 
            if (esllavePrimaria) {
                //eligio el campo como llave primaria
                nuevoCampo.setEsLlavePrimaria(true);
            } else {
                //do nothing, no eligio el campo como llave primaria
            }
        } else {
            //La lista de campos no esta vacia
            //Recorrer la lista y verificar que otro campo no sea una llave primaria
            boolean confirm_LlaveP = true;
            if (esllavePrimaria) {
                for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                    if (archivo_actual.getLista_campos().get(i).isEsLlavePrimaria() == true) {
                        confirm_LlaveP = false;
                        break;
                    }
                }
                //Mostrar mensaje que ya existe otra una llave primaria
                if (!confirm_LlaveP) {
                    JOptionPane.showMessageDialog(jd_crearCampo, "Otro campo ya es una llave primaria en este archivo.");
                    confirmar_crearCampo = false;
                    jr_llaveSi.setSelected(false);
                } else {
                    nuevoCampo.setEsLlavePrimaria(true);
                    confirmar_crearCampo = true;
                }
            }

        }

        //Ultima verificacion
        if (nuevoCampo.getNombre_Campo() == null || nuevoCampo.getTipo_dato() == null
                || nuevoCampo.getLongitud() == 0) {
            confirmar_crearCampo = false;
        }

        //Crear campo
        if (confirmar_crearCampo == true) {
            archivo_actual.getLista_campos().add(nuevoCampo);
            JOptionPane.showMessageDialog(jd_crearCampo, "Se creo el campo exitosamente!");
            //Si el panel donde esta la tabla esta habilitado actualizarla
            if (jP_tabla_ListarCampos.isVisible()) {
                refrescarTabla();
            }
            archivo_actual.setGuardado(false);
            jt_nombreCampo.setText("");
            cb_tipoCampo.setSelectedIndex(0);
            js_longitud.setValue(0);
            jr_llaveNo.setSelected(false);
            jr_llaveSi.setSelected(false);
            jd_crearCampo.dispose();
        }
    }//GEN-LAST:event_jb_crearCampoMouseClicked

    private void jb_modCampoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_modCampoMouseClicked

        boolean confirmar_modCampo = false;
        Campo Campo_mod = archivo_actual.getLista_campos().get(campo_seleccionado);
        String tipo_mod = "";
        //El usuario puede agregar los campo que desee
        //Validar entradas de datos
        //Validar nombre de campo
        if (jt_nombreCampo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(jd_crearCampo, "!No puede dejar en blanco el nombre del campo!");
            confirmar_modCampo = false;
        } else {
            confirmar_modCampo = true;

        }
        //Validar Tipo de Dato
        if (cb_tipoCampo.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(jd_crearCampo, "Debe elegir el tipo del dato.");
            confirmar_modCampo = false;
        } else {
            int opcion = cb_tipoCampo.getSelectedIndex();
            //Agregar el tipo de dato que selecciono el usuario
            switch (opcion) {
                case 1:
                    //Eligio String
                    tipo_mod = "String";
                    break;
                case 2:
                    //Eligio Int
                    tipo_mod = "int";
                    break;
                case 3:
                    //Eligio Double
                    tipo_mod = "double";
                    break;
                case 4:
                    //Eligio Float
                    tipo_mod = "float";
                    break;
                case 5:
                    //Eligio Char
                    tipo_mod = "char";
                    break;
                default:
            }
            confirmar_modCampo = true;
        }

        //Validar Longitud
        if ((int) js_longitud.getValue() == 0) {
            JOptionPane.showMessageDialog(jd_crearCampo, "La longitud del campo debe ser mayor a 0.");
            confirmar_modCampo = false;
        } else if ((int) js_longitud.getValue() > 30) {
            JOptionPane.showMessageDialog(jd_crearCampo, "La longitud del campo no puede ser ser mayor a 30.");
            confirmar_modCampo = false;
        } else {
            confirmar_modCampo = true;
        }

        //Validar Si es llave primaria
        //Recuperamos la eleccion de marcar como llave primaria
        boolean esllavePrimaria = false;

        if (!jr_llaveNo.isSelected() && !jr_llaveSi.isSelected()) {
            //No selecciono sobre la opcion si el campo es llave primaria
            JOptionPane.showMessageDialog(jd_crearCampo, "Debe elegir si el campo es una llave primaria o no.");
        }

        boolean confirm_LlaveP = true;
        if (jr_llaveSi.isSelected()) {
            esllavePrimaria = true;
        } else {
            esllavePrimaria = false;
            confirm_LlaveP = false;
        }

        //Busqueda para verificar que no haya otra llave primaria
        if (archivo_actual.getLista_campos().isEmpty()) {
            //La lista de campos esta vacia 
            if (esllavePrimaria) {
                //eligio el campo como llave primaria
                Campo_mod.setEsLlavePrimaria(true);
            } else {
                //do nothing, no eligio el campo como llave primaria
            }
        } else {
            //La lista de campos no esta vacia
            //Recorrer la lista y verificar que otro campo no sea una llave primaria

            if (esllavePrimaria) {
                for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                    if (archivo_actual.getLista_campos().get(i).isEsLlavePrimaria() == true) {
                        if (archivo_actual.getLista_campos().get(i).isEsLlavePrimaria() == Campo_mod.isEsLlavePrimaria()) {
                            confirm_LlaveP = true;
                            break;
                        } else {
                            confirm_LlaveP = false;
                            break;
                        }

                    }
                }
                //Mostrar mensaje que ya existe otra una llave primaria
                if (!confirm_LlaveP) {
                    JOptionPane.showMessageDialog(jd_crearCampo, "Otro campo ya es una llave primaria en este archivo.");
                    confirmar_modCampo = false;
                } else {
                    confirmar_modCampo = true;
                }
            }

        }

        //Ultima verificacion
        if (Campo_mod.getNombre_Campo() == null || Campo_mod.getTipo_dato() == null
                || Campo_mod.getLongitud() == 0) {
            confirmar_modCampo = false;
        }
        //Crear campo

        if (Campo_mod.getNombre_Campo().equals(jt_nombreCampo.getText()) && Campo_mod.getTipo_dato().equals(tipo_mod)
                && Campo_mod.getLongitud() == (int) js_longitud.getValue()) {
            if (!confirm_LlaveP == false && !Campo_mod.isEsLlavePrimaria()) {

            } else if (confirm_LlaveP == false && Campo_mod.isEsLlavePrimaria()) {
                JOptionPane.showMessageDialog(jd_crearCampo, "No se realizo ninguna modificacion en el campo.");
                confirmar_modCampo = false;
                archivo_actual.setGuardado(false);
                jt_nombreCampo.setText("");
                cb_tipoCampo.setSelectedIndex(0);
                js_longitud.setValue(0);
                jr_llaveNo.setSelected(false);
                jr_llaveSi.setSelected(false);
                jd_crearCampo.dispose();
            }

        }
        if (confirmar_modCampo == true) {

            //Realizar modificaciones
            Campo_mod.setNombre_Campo(jt_nombreCampo.getText());//Modificar Nombre
            Campo_mod.setTipo_dato(tipo_mod);//Modificar Tipo de Dato
            Campo_mod.setLongitud((int) js_longitud.getValue());

            if (!confirm_LlaveP) {
                Campo_mod.setEsLlavePrimaria(false);
            } else {
                Campo_mod.setEsLlavePrimaria(true);
            }

            JOptionPane.showMessageDialog(jd_crearCampo, "Se modifico el campo exitosamente!");
            //Si el panel donde esta la tabla esta habilitado actualizarla
            if (jP_tabla_ListarCampos.isVisible()) {
                refrescarTabla();
            }
            archivo_actual.setGuardado(false);
            jt_nombreCampo.setText("");
            cb_tipoCampo.setSelectedIndex(0);
            js_longitud.setValue(0);
            jr_llaveNo.setSelected(false);
            jr_llaveSi.setSelected(false);
            jd_crearCampo.dispose();

            //Preguntar si quiere guardar el archivo
            if (!archivo_actual.isGuardado()) {
                //Archivo no esta guardado
                int resultado = JOptionPane.showConfirmDialog(jP_menuArchivo, "No ha guardado el archivo actual\n¬øDesea guardarlo?"
                        + "", "Cerrar Archivo", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                if (resultado == 0) {
                    //Ingresa SI el usuario
                    //Verificar si el archivo es nuevo o si ya ha sido utilizado y guardado antes
                    if (archivo_actual.getNombre_archivo().equals("nuevo archivo")) {
                        B_Salvar_ArchActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, null));
                    } else {
                        //Solo se guarda el archivo ya existente
                        escribirArchivo(archivo_actual);
                        JOptionPane.showMessageDialog(jP_menuArchivo, "!El archivo " + archivo_actual.getNombre_archivo() + " se ha guardado exitosamente!");
                    }

                } else {
                    //Ingresa NO el usuario 
                    JOptionPane.showMessageDialog(jP_menuArchivo, "No se guardaron los datos del archivo: " + archivo_actual.getNombre_archivo() + " .");
                }
            } else {
                //Archivo esta guardado
            }
        }


    }//GEN-LAST:event_jb_modCampoMouseClicked

    private void jt_nombreCampoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jt_nombreCampoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jt_nombreCampoActionPerformed

    private void B_Intro_RegisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Intro_RegisMouseClicked
        //Abir ventana introducir registro
        boolean verificar_introducirR = false;
        //Verificar si existen campos
        if (archivo_actual.getLista_campos().isEmpty()) {
            //No existe ningun campo
            JOptionPane.showMessageDialog(jP_menuArchivo, "No existe ningun campo.\nDebe crear algun campo para introducir un registro");
            verificar_introducirR = false;
        } else {
            verificar_introducirR = true;
        }
        //Verificar que existe una llave primaria dentro de los campos
        boolean existe_llavePrimaria = false;
        for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
            if (archivo_actual.getLista_campos().get(i).isEsLlavePrimaria() == true) {
                existe_llavePrimaria = true;
                break;
            }
        }

        if (!existe_llavePrimaria) {
            JOptionPane.showMessageDialog(jP_menuArchivo, "Debe asignar a un campo como llave primaria.");
            verificar_introducirR = false;
        } else {
            verificar_introducirR = true;
        }

        //Nombres del archivo bin para cargar el arbol
        int instancia_punto = archivo_actual.getNombre_archivo().indexOf('.');
        String nombre_archivo_bin = "./" + archivo_actual.getNombre_archivo().substring(0, instancia_punto) + ".bin";
        
        if (verificar_introducirR) {
            int contador_listaCampos = 0, verify_primay_key = 0, valor_primaryKey = 0;
            String registro = "", key = "", porcion_registro = null;
            boolean verificar_input = true;

            //Crear registro
            while (contador_listaCampos < archivo_actual.getLista_campos().size()) {
                Campo campo_temp = archivo_actual.getLista_campos().get(contador_listaCampos);//Variable temporal de Campo
                String tipo_dato_evaluar = campo_temp.getTipo_dato();

                //Entrada de dato por campo
                porcion_registro = JOptionPane.showInputDialog(jP_menuArchivo, "Entrada para el campo: "
                        + campo_temp.getNombre_Campo() + "\nTipo de Dato: " + campo_temp.getTipo_dato()
                        + "\nLongitud: " + campo_temp.getLongitud() + "\nEs Llave Primaria: " + campo_temp.isEsLlavePrimaria());
                if (porcion_registro == null) {
                    break;
                }

                verificar_input = validarEntradaRegistro(porcion_registro, campo_temp);

                //Si no es llave primaria y no lleno a la longitud requerida, llenar con espacios en blanco 
                if (!campo_temp.isEsLlavePrimaria() && porcion_registro.length() < campo_temp.getLongitud()) {
                    porcion_registro = fixLength(porcion_registro, campo_temp.getLongitud());
                }

                //Verificar que no se repite la llave primaria 
                if (campo_temp.isEsLlavePrimaria() && porcion_registro != null) {
                    valor_primaryKey = Integer.parseInt(porcion_registro);
                    ArbolB btree_verificar = cargarArbol(nombre_archivo_bin);
                    if (btree_verificar == null) {
                        //No existe el arbol, seria la primera insercion, no busca
                    } else {
                        Llave verify_key = btree_verificar.buscarLlave(btree_verificar.getRaiz(), valor_primaryKey);
                        if (verify_key == null) {
                            //No la encontro puede continuar
                        } else {
                            //Encontro la llave primaria
                            verificar_input = false;
                            JOptionPane.showMessageDialog(jP_menuArchivo, "El dato ingresado para la llave primaria no es valido.\n"
                                    + "Se encontro que ya existe el valor dentro de los registros.");
                        }
                    }
                }

                //Verificar que campo donde llave primaria es unica
                if (verificar_input && porcion_registro != null) {
                    //Paso todas las validaciones
                    registro += porcion_registro;
                    registro += "|";
                    contador_listaCampos++;
                    //Obtener el valor de llave primaria 
                    if (campo_temp.isEsLlavePrimaria() && verify_primay_key == 0) {
                        //Si es el primer campo empieza en 0 pq el valor obtenido es -1 
                        key = porcion_registro;
                        verify_primay_key = 1;
                    }
                }

            }

            //Si logro recorrer los campos correctamente el archivo se puede recorrer 
            registro += "\n";
            if (contador_listaCampos == archivo_actual.getLista_campos().size()) {
                //Escribir registro en el archivo
                try {
                    //Incrementamos el contador de escribir archivos
                    RandomAccessFile raf = new RandomAccessFile(archivo_actual.getArchivo(), "rw");
                    
                    long byte_offset;
                    //Determinar posicion de escrituta
                    //Implementacion de agregar en el AvailList
                    if(!archivo_actual.getAvail_list().isEmpty()){
                        //Agregar el nuevo registro de manera First fit al archivo sobreescribiendo
                        byte_offset = (long)archivo_actual.getAvail_list().get(0);
                        raf.seek(byte_offset);
                        byte_offset = raf.getFilePointer();
                        raf.writeChars(registro);
                        //Remover offset del availList
                        archivo_actual.getAvail_list().removeFirst();
                        //Actualizar availList
                        actualizar_AvailList(archivo_actual);
                    } else {
                        //Implementacion al final de archivo
                        raf.seek(raf.length());
                        byte_offset= raf.getFilePointer();
                        raf.writeChars(registro);
                    }
                    //
                    raf.close();
                    //Agarrar objeto para llave despues de que este escrito
                    
                    Llave nueva_llave = new Llave(byte_offset, Integer.parseInt(key));
                    
                    int verify_num_registro = actualizar_numRegistros(1);
                    //Escritura en el arbol
                    if (verify_num_registro == 0) {
                        //No existe un arbol, lo crea aqui
                        ArbolB btree_nuevo = new ArbolB(3);
                        btree_nuevo.insert(nueva_llave);
                        escribirArbol(btree_nuevo, nombre_archivo_bin);
                    } else {
                        //Ya existe un arbol, Cargar arbol de archivo binario
                        ArbolB btree_cargado = cargarArbol(nombre_archivo_bin);

                        btree_cargado.insert(nueva_llave);
                        escribirArbol(btree_cargado, nombre_archivo_bin);
                   }     
                      
                } catch (FileNotFoundException ex) {

                } catch (IOException ex) {
                }
                //Incrementar el dato de metadata (Numero de Registros)
                actualizar_numRegistros(3);
                JOptionPane.showMessageDialog(jP_menuArchivo, "Se agrego el registro exitosamente!\n"
                        + "Se actualizo el archivo con el nuevo registro.");
                B_Crear_Campo.setEnabled(false);
                B_Mod_Campo.setEnabled(false);
                B_Borrar_Campo.setEnabled(false);
            }
        }//fin if  
    }//GEN-LAST:event_B_Intro_RegisMouseClicked

    private void b_introducirRegistroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_b_introducirRegistroMouseClicked

        jd_introducirRegistro.setVisible(false);
        tf_introducirRegistro.setText("");
    }//GEN-LAST:event_b_introducirRegistroMouseClicked

    private void B_Buscar_RegisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Buscar_RegisMouseClicked

        //Revisar si existen registros
        int num_registros = actualizar_numRegistros(1);
        boolean validar_buscarRegistro = true;

        //Validar Existencia de Campos
        if (archivo_actual.getLista_campos().isEmpty()) {
            JOptionPane.showMessageDialog(jP_menuArchivo, "No existe ningun campo. No pueden existir registros sin que existan campos.");
            validar_buscarRegistro = false;
        }
        //Validar existencia de registros
        if (num_registros == 0) {
            JOptionPane.showMessageDialog(jP_menuArchivo, "El numero de registros en este archivo es de 0.\nIngrese registros para realizar la busqueda.");
            validar_buscarRegistro = false;
        }

        if (validar_buscarRegistro) {

            Campo campo_primario = null;
            //Buscar el campo primario
            for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                if (archivo_actual.getLista_campos().get(i).isEsLlavePrimaria()) {
                    campo_primario = archivo_actual.getLista_campos().get(i);
                    break;
                }
            }

            String registro_buscar = "";
            int valor_llave = 0;
            boolean validar_entrada = false;
            int contador_true = 0;

            while (!validar_entrada) {
                registro_buscar = JOptionPane.showInputDialog(jP_menuArchivo, "Ingrese el dato a buscar mediante el campo: " + campo_primario.getNombre_Campo()
                        + "\nLongitud Campo: " + campo_primario.getLongitud());
                //0. Validacion entrada null
                if (registro_buscar == null) {
                    break;
                }
                contador_true = 0;
                //1.Validaci√≥n que la entrada sea un numero
                try {
                    valor_llave = Integer.parseInt(registro_buscar);

                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(jP_menuArchivo, "El dato ingresado debe ser solo de numeros.");
                    validar_entrada = false;
                    contador_true++;
                }
                //2.Validaci√≥n que cumpla con la longitud
                if (registro_buscar.length() != campo_primario.getLongitud()) {
                    JOptionPane.showMessageDialog(jP_menuArchivo, "La longitud del registro a buscar no es la requerida.");
                    validar_entrada = false;
                    contador_true++;
                }

                //Paso todas las validaciones
                if (contador_true == 0) {
                    validar_entrada = true;
                    valor_llave = Integer.parseInt(registro_buscar);
                }
            }

            if (validar_entrada) {
                //Obtener nombre de archivo
                int instancia_punto = archivo_actual.getNombre_archivo().indexOf('.');
                String nombre_archivo_bin = "./" + archivo_actual.getNombre_archivo().substring(0, instancia_punto) + ".bin";

                //Cargar archivo
                ArbolB btree_cargado = cargarArbol(nombre_archivo_bin);

                Llave llave_buscada = btree_cargado.buscarLlave(btree_cargado.getRaiz(), valor_llave);
                if (llave_buscada == null) {
                    //no encontro la llave
                    JOptionPane.showMessageDialog(jP_menuArchivo, "No se encontro el registro buscado.");
                } else {

                    try {
                        RandomAccessFile raf_buscar = new RandomAccessFile(archivo_actual.getArchivo(), "rw");

                        raf_buscar.seek(llave_buscada.getOffset());
                        String registro_mostrar = raf_buscar.readLine();

                        registro_mostrar = registro_mostrar.replaceAll("\\s+", "");
                        JOptionPane.showMessageDialog(jP_menuArchivo, "Se encontro el registro exitosamente.\n"
                                + registro_mostrar);
                        System.out.println(llave_buscada.getOffset() + "Primer Registro");
                        raf_buscar.close();
                    } catch (FileNotFoundException ex) {

                    } catch (IOException ex) {

                    }

                }
            }
        }
    }//GEN-LAST:event_B_Buscar_RegisMouseClicked

    private void B_Modi_RegisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Modi_RegisMouseClicked
        //Metoddo para modificar un registro
        //Preguntar mediante que llave va buscar
        String registro_mod = null;
        boolean validar_entrada = false;
        int valor_registro = 0;
        Campo campo_primario = null;
        //Buscar el campo primario
        for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
            if (archivo_actual.getLista_campos().get(i).isEsLlavePrimaria()) {
                campo_primario = archivo_actual.getLista_campos().get(i);
                break;
            }
        }

        while (!validar_entrada) {
            registro_mod = JOptionPane.showInputDialog(jP_menuArchivo, "Inserte el registro a modificar: "
                    + "\nLongitud[" + campo_primario.getLongitud() + "]");
            validar_entrada = validarEntradaRegistro(registro_mod, campo_primario);
        }

        if (validar_entrada && registro_mod != null) {
            valor_registro = Integer.parseInt(registro_mod);
            //Buscar Registro en arbol y cargar arbol
            int instancia_punto = archivo_actual.getNombre_archivo().indexOf('.');
            String nombre_archivo_bin = "./" + archivo_actual.getNombre_archivo().substring(0, instancia_punto) + ".bin";
            ArbolB btree_cargado = cargarArbol(nombre_archivo_bin);

            if (btree_cargado == null) {
                //do nothing
            } else {
                Llave llave_mod = btree_cargado.buscarLlave(btree_cargado.getRaiz(), valor_registro);

                if (llave_mod == null) {
                    JOptionPane.showMessageDialog(jP_menuArchivo, "No se encontro el registro ingresado.");
                } else {

                    try {
                        //Se encontro el registro
                        //Presentar campos y que el usuario eliga uno
                        RandomAccessFile raf = new RandomAccessFile(archivo_actual.getArchivo(), "rw");
                        raf.seek(llave_mod.getOffset());

                        String registro_mostrar = raf.readLine();
                        registro_mostrar = registro_mostrar.replace('\0', ' ');//Quitar caracteres null
                        registro_mostrar = registro_mostrar.replaceAll("\\s+", "");

                        //Conesguir nombre de Strings
                        String nombre_campos = "";
                        for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                            nombre_campos += "[" + i + "]" + archivo_actual.getLista_campos().get(i).getNombre_Campo() + "\n";
                        }
                        String opcion_Campo = "";
                        int opcion = 0;
                        boolean validar = false;
                        while (!validar) {
                            validar = true;
                            opcion_Campo = JOptionPane.showInputDialog(jP_menuArchivo, "Registro:" + registro_mostrar + "\nCampos:\n"
                                    + nombre_campos + "Elegir campo:");
                            if (opcion_Campo == null) {
                                //do nothing
                                validar = false;
                                break;
                            } else {
                                //1. Validaci√≥n inserci√≥n en blanco
                                if (opcion_Campo.equals("")) {
                                    JOptionPane.showMessageDialog(jP_menuArchivo, "Debe seleccionar una opcion.");
                                    validar = false;
                                }
                                //2. Validaci√≥n ingresar un numero
                                try {
                                    opcion = Integer.parseInt(opcion_Campo);

                                } catch (Exception e) {
                                    JOptionPane.showMessageDialog(jP_menuArchivo, "Dato ingresado invalido.");
                                    validar = false;
                                }

                                //3. Validacion de no salirse del tama√±o de la cantidad de campos
                                if (opcion > archivo_actual.getLista_campos().size() - 1 || opcion < 0) {
                                    JOptionPane.showMessageDialog(jP_menuArchivo, "Selecciono una opcion invalida.");
                                    validar = false;
                                }
                                //Validacion de caracteres a leer 

                                //4. 
                                if (opcion == 0) {
                                    JOptionPane.showMessageDialog(jP_menuArchivo, "No se puede modificar la llave primaria.");
                                    validar = false;
                                }
                            }
                        }

                        if (validar && !opcion_Campo.equals("")) {
                            //Obtener campo elegido
                            Campo campo_temp = archivo_actual.getLista_campos().get(opcion);
                            //Obtener seccion de registro a modificar
                            //Empezar en 1 el contador para saltarnos la llave primaria
                            int contador = 1, pos_mod = 0;
                            String nombre_comparar = archivo_actual.getLista_campos().get(contador).getNombre_Campo(),
                                    nombre_campo_mod = campo_temp.getNombre_Campo();
                            String str_seccion = registro_mostrar, seccion = "";

                            do {
                                pos_mod += archivo_actual.getLista_campos().get(contador - 1).getLongitud() + 1;

                                nombre_comparar = archivo_actual.getLista_campos().get(contador).getNombre_Campo();
                                //Final de seccion de registro
                                int final_dato = str_seccion.indexOf('|') + 1;
                                str_seccion = str_seccion.substring(final_dato);
                                final_dato = str_seccion.indexOf('|') + 1;
                                seccion = str_seccion.substring(0, final_dato - 1); //Obtener seccion de dato
                                contador++;
                            } while (!nombre_comparar.equals(nombre_campo_mod));

                            //Mostar Registro del campo seleccionado:
                            String dato_mod = null;
                            boolean validar_entrada_mod = false;

                            while (!validar_entrada_mod) {
                                dato_mod = JOptionPane.showInputDialog(jP_menuArchivo, "Campo: " + campo_temp.getNombre_Campo()
                                        + "\nDato: " + seccion + "\nTipo de Dato:" + campo_temp.getTipo_dato()
                                        + "\nLongitud: " + campo_temp.getLongitud() + "\nEs Llave Primaria: No\nIngresar modificacion de dato:");
                                //Llamar a metodo de validar entrada
                                validar_entrada_mod = validarEntradaRegistro(dato_mod, campo_temp);
                                dato_mod = fixLength(dato_mod, campo_temp.getLongitud());
                            }

                            if (validar_entrada_mod && dato_mod != null) {
                                pos_mod = pos_mod * 2;//Multiplicar x2 para encontrar bien la posicion ya que guardamos como chars todo
                                //Sustituir valor en registro
                                long posicion_dato = llave_mod.getOffset() + (long) pos_mod;
                                raf.seek(posicion_dato);
                                raf.writeChars(dato_mod);
                                JOptionPane.showMessageDialog(jP_menuArchivo, "Dato anterior: " + seccion + "Dato nuevo:" + dato_mod
                                        + "¬°Se modifico el registro exitosamente!");
                            }
                        }
                        raf.close();
                    } catch (FileNotFoundException ex) {

                    } catch (IOException ex) {
                    }
                }//
            }
        }
    }//GEN-LAST:event_B_Modi_RegisMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        jd_modificarRegistro.setVisible(false);
        tf_modificarRegistro.setText("");
    }//GEN-LAST:event_jButton1MouseClicked

    private void B_Borrar_RegisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Borrar_RegisMouseClicked

        int verificar_num_registro = actualizar_numRegistros(1);
        if (verificar_num_registro == 0) {
            JOptionPane.showMessageDialog(jP_menuArchivo, "No existe ningun registro.");
        } else {

            Campo campo_primario = null;
            //Buscar el campo primario
            for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                if (archivo_actual.getLista_campos().get(i).isEsLlavePrimaria()) {
                    campo_primario = archivo_actual.getLista_campos().get(i);
                    break;
                }
            }
            String primeKey = "";
            int llave = 0;
            boolean flag = false;
            int contador = 0;

            while (!flag) {
                primeKey = JOptionPane.showInputDialog(this, "Ingrese la llave primaria del registro a eliminar: ");
                contador = 0;

                if (primeKey == null) {
                    //do nothing
                    flag = true;
                    contador = 1;
                } else {
                    if (primeKey.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "No ha ingresado ningun valor!");
                        contador++;
                    }
                    try {
                        llave = Integer.parseInt(primeKey);
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "La llave ingresada dee ser un valor numerico!");
                        contador++;
                    }

                    if (campo_primario.getLongitud() != primeKey.length()) {
                        JOptionPane.showMessageDialog(this, "La longitud de la llave primaria ingresada no es correcta!");
                        contador++;
                    }

                    if (contador == 0) {
                        flag = true;
                        llave = Integer.parseInt(primeKey);
                    }
                }
            }

            if (flag == true && contador == 0) {
                int instancia_punto = archivo_actual.getNombre_archivo().indexOf('.');
                String nombre_archivo_bin = "./" + archivo_actual.getNombre_archivo().substring(0, instancia_punto) + ".bin";
                //Cargar archivo
                ArbolB btree_cargado_elim = cargarArbol(nombre_archivo_bin);
                Llave key = btree_cargado_elim.buscarLlave(btree_cargado_elim.raiz, llave);

                if (key == null) {
                    JOptionPane.showMessageDialog(this, "No se encontro la llave en el arbol.");
                } else {
                    Nodo nodo = btree_cargado_elim.searchDeleteNode(btree_cargado_elim.getRaiz(), key.getLlave());
                    boolean isRemoved = btree_cargado_elim.eliminar(nodo, key);

                    if (isRemoved == true) {
                        try {
                            RandomAccessFile raf = new RandomAccessFile(archivo_actual.getArchivo(), "rw");
                            raf.seek(key.getOffset());
                            raf.writeChar('*');
                            //String s = raf.readLine();
                            //String new_cadena = s.charAt(0) + "*" + s.substring(2);
                            //raf.seek(key.getOffset());
                            //raf.writeChars(new_cadena);
                            
                            raf.close();
                        } catch (FileNotFoundException ex) {

                        } catch (IOException ex) {

                        }
                    }

                    //Escribir en el arbol el delete
                    escribirArbol(btree_cargado_elim, nombre_archivo_bin);
                    //implementacion availist
                    archivo_actual.getAvail_list().add(key.getOffset());
                    //Modificar la cabeza
                    //Actualizar numero de registros
                    int update_num_Records = actualizar_numRegistros(2);
                    actualizar_AvailList(archivo_actual);
                    archivo_actual.setGuardado(false);
                    JOptionPane.showMessageDialog(this, "Se elimino la llave del archivo de registros!");
                }
            }
        }
    }//GEN-LAST:event_B_Borrar_RegisMouseClicked

    private void B_Listar_RegisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Listar_RegisMouseClicked
        // TODO add your handling code here:
        jp_Registro.setVisible(true);
        String[] columns = new String[4];

        for (int i = 0; i < 4; i++) {
            if (archivo_actual.getLista_campos().size() > i){
                columns[i] = archivo_actual.getLista_campos().get(i).getNombre_Campo();
            }
        }

        jt_Registro.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                columns
        ));

        DefaultTableModel model = (DefaultTableModel) jt_Registro.getModel();

        RandomAccessFile raf1;
        
        try {
            raf1 = new RandomAccessFile(archivo_actual.getArchivo(), "rw");
            int lineas_recorrer1 = Character.getNumericValue(raf1.readChar()) + 3;
            raf1.seek(0);
            long inicio_busqueda1 = 0;
            for (int i = 0; i <= lineas_recorrer1; i++) {
                raf1.readLine();
                inicio_busqueda1 = raf1.getFilePointer();
            }
            raf1.readLine();
            inicio_busqueda1 = raf1.getFilePointer();

            //conseguir el tama√±o del registro
            long record_size = 0;
            for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                record_size += (long) archivo_actual.getLista_campos().get(i).getLongitud() + 1;
            }
            record_size = (record_size * 2) + 4;

            //long final_listar = (record_size * 5 )+ inicio_busqueda1;
            //if( == '*') {}
            int contRegis = 0; 
            String registro = "";
            //raf1.seek(inicio_busqueda1);
            if(!archivo_actual.getAvail_list().isEmpty()){
                raf1.readLine();
                record_size+= 2;
            }
            while (inicio_busqueda1 < raf1.length()) {
                registro = raf1.readLine();
                //System.out.println(registro);
                registro = registro.replace('\0', ' ');//Quitar caracteres null
                //System.out.println("Regis:" + registro);
                registro = registro.replaceAll("\\s+", "");
                //System.out.println("regis2" +registro);
                Object[] row = new Object[archivo_actual.getLista_campos().size()];
                int cont = 0;
                String str_seccion = registro, seccion = "";
                if(registro.charAt(0) == '*'){
                    //do nothing
                    inicio_busqueda1 += record_size;
                    raf1.seek(inicio_busqueda1);
                } else {
                    //ystem.out.println(registro);
                     while (cont < archivo_actual.getLista_campos().size()) {
                        int final_dato = str_seccion.indexOf('|') + 1;
                        if (cont == 0) {
                            seccion = str_seccion.substring(0, final_dato - 1);
                            row[cont] = seccion;
                        } else {
                            str_seccion = str_seccion.substring(final_dato);
                            int _final_dato = str_seccion.indexOf('|') + 1;
                            seccion = str_seccion.substring(0, _final_dato - 1);
                            row[cont] = seccion;
                        }
                        cont++;
                    }
                    if (!seccion.equals("")) {
                        model.addRow(row);
                    }
                    //Obtener cada seccion, 
                    inicio_busqueda1 += record_size;
                    raf1.seek(inicio_busqueda1);
                }
            /*
            while (contRegis < 5) {
                System.out.println(raf1.getFilePointer());
                registro = raf1.readLine();
                registro = registro.replace('\0', ' ');//Quitar caracteres null
                registro = registro.replaceAll("\\s+", "");
                //System.out.println(registro);
                Object[] row = new Object[4];
                int cont = 0;
                String str_seccion = registro, seccion = "";
                System.out.println(registro);
                if(registro.charAt(0) == '*'){
                    System.out.println("Si entro");
                    //do nothing
                    inicio_busqueda1 += record_size*2;
                    raf1.seek(inicio_busqueda1);
                    contRegis--;
                } else {
                    //ystem.out.println(registro);
                     while (cont < archivo_actual.getLista_campos().size()) {
                        int final_dato = str_seccion.indexOf('|') + 1;
                        if (cont == 0) {
                            seccion = str_seccion.substring(0, final_dato - 1);
                            row[cont] = seccion;
                        } else {
                            str_seccion = str_seccion.substring(final_dato);
                            int _final_dato = str_seccion.indexOf('|') + 1;
                            seccion = str_seccion.substring(0, _final_dato - 1);
                            row[cont] = seccion;
                        }
                        cont++;
                    }
            
                    if (!seccion.equals("")) {
                        model.addRow(row);
                        contRegis++;
                    }*/
            
                    //Obtener cada seccion, 
                    inicio_busqueda1 += record_size;
                    raf1.seek(inicio_busqueda1);
            }

            //}
        } catch (Exception e) {
            e.printStackTrace();
        }


       jt_Registro.setModel(model);
    }//GEN-LAST:event_B_Listar_RegisMouseClicked

    private void cb_tipoCampoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_tipoCampoItemStateChanged
        //Validacion para desabilitar longitud si escoje un char
        if (cb_tipoCampo.getSelectedIndex() == 5) {
            js_longitud.setValue(1);
            js_longitud.setEnabled(false);
        } else {
            js_longitud.setValue(0);
            js_longitud.setEnabled(true);
        }
    }//GEN-LAST:event_cb_tipoCampoItemStateChanged

    private void jb_RegistrosPruebasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jb_RegistrosPruebasMouseClicked

        if (jb_RegistrosPruebas.isEnabled()) {
            String var = "";
            int opcion = 0;

            while (opcion > 2 || opcion < 1) {

                var = JOptionPane.showInputDialog(this, "Elija la opcion de generar: \n1) City y Person File \n2) Archivos Personalizados");

                try {
                    opcion = Integer.parseInt(var);
                } catch (NumberFormatException e) {

                }
            }

            switch (opcion) {

                case 1: {

                    Archivo nuevo_archivo;
                    ArrayList<Integer> cityIds = new ArrayList();

                    for (int i = 0; i < 2; i++) {

                        if (i == 0) {

                            nuevo_archivo = new Archivo("./PersonFile.txt");
                            nuevo_archivo.setNombre_archivo("PersonFile.txt");
                            Lista_Archivos.add(nuevo_archivo);
                            cityIds = generarPersonFile(nuevo_archivo);
                        } else {
                            nuevo_archivo = new Archivo("./CityFile.txt");
                            nuevo_archivo.setNombre_archivo("CityFile.txt");
                            Lista_Archivos.add(nuevo_archivo);
                            generarCityFile(nuevo_archivo, cityIds);
                        }
                    }

                    JOptionPane.showMessageDialog(this, "Los archivos han sido creados exitosamente!");
                    break;

                }
                case 2: {

                    int size = 0;
                    String var1 = "";

                    while (size <= 0) {

                        var1 = JOptionPane.showInputDialog(this, "Ingrese la cantidad de registros a elaborar:");

                        try {
                            size = Integer.parseInt(var1);

                        } catch (NumberFormatException e) {

                        }
                    }

                    generarPersonalizados(size);
                    JOptionPane.showMessageDialog(this, "Los archivo personalizado sido creados exitosamente!");
                    break;
                }
            }

        }


    }//GEN-LAST:event_jb_RegistrosPruebasMouseClicked

    private void B_Expo_XMLMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Expo_XMLMouseClicked
        CrearXml();
        CrearXSLT();
        JOptionPane.showMessageDialog(this, "Exportado con exito");
    }//GEN-LAST:event_B_Expo_XMLMouseClicked

    private void B_Expor_ExcelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Expor_ExcelMouseClicked
        String[] columns = new String[archivo_actual.getLista_campos().size()];

        for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
            columns[i] = archivo_actual.getLista_campos().get(i).getNombre_Campo();
        }

        jt_Regis_NM.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                columns
        ));

        DefaultTableModel model = (DefaultTableModel) jt_Regis_NM.getModel();

        RandomAccessFile raf1;
        try {
            raf1 = new RandomAccessFile(archivo_actual.getArchivo(), "rw");
            int lineas_recorrer1 = Character.getNumericValue(raf1.readChar()) + 3;
            raf1.seek(0);
            long inicio_busqueda1 = 0;
            for (int i = 0; i <= lineas_recorrer1; i++) {
                raf1.readLine();
                inicio_busqueda1 = raf1.getFilePointer();
            }
            raf1.readLine();
            inicio_busqueda1 = raf1.getFilePointer();

            //conseguir el tama√±o del registro
            long record_size = 0;
            for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                record_size += (long) archivo_actual.getLista_campos().get(i).getLongitud() + 1;
            }
            record_size = (record_size * 2) + 4;

            //long final_listar = (record_size * 5 )+ inicio_busqueda1;
            //if( == '*') {}
            String registro = "";
            while (inicio_busqueda1 < raf1.length()) {
                registro = raf1.readLine();
                registro = registro.replace('\0', ' ');//Quitar caracteres null
                registro = registro.replaceAll("\\s+", "");
                //System.out.println(registro);
                Object[] row = new Object[archivo_actual.getLista_campos().size()];
                int cont = 0;
                String str_seccion = registro, seccion = "";

               if(registro.charAt(0) == '*'){
                    //do nothing
                    inicio_busqueda1 += record_size;
                    raf1.seek(inicio_busqueda1);
                } else {
                    //ystem.out.println(registro);
                     while (cont < archivo_actual.getLista_campos().size()) {
                        int final_dato = str_seccion.indexOf('|') + 1;
                        if (cont == 0) {
                            seccion = str_seccion.substring(0, final_dato - 1);
                            row[cont] = seccion;
                        } else {
                            str_seccion = str_seccion.substring(final_dato);
                            int _final_dato = str_seccion.indexOf('|') + 1;
                            seccion = str_seccion.substring(0, _final_dato - 1);
                            row[cont] = seccion;
                        }
                        cont++;
                    }
                    if (!seccion.equals("")) {
                        model.addRow(row);
                    }
                    //Obtener cada seccion, 
                    inicio_busqueda1 += record_size;
                    raf1.seek(inicio_busqueda1);
                }

            }
        } catch (Exception e) {
        }

        jt_Regis_NM.setModel(model);

        try {
            Workbook wb = new XSSFWorkbook();
            Sheet sheet = wb.createSheet("Prueba1");
            Row rowCol = sheet.createRow(0);
            for (int i = 0; i < jt_Regis_NM.getColumnCount(); i++) {
                Cell cell = rowCol.createCell(i);
                cell.setCellValue(jt_Regis_NM.getColumnName(i));
            }
            for (int j = 0; j < jt_Regis_NM.getRowCount(); j++) {
                Row row = sheet.createRow(j + 1);
                for (int k = 0; k < jt_Regis_NM.getColumnCount(); k++) {
                    Cell cell = row.createCell(k);
                    if (jt_Regis_NM.getValueAt(j, k) != null) {
                        cell.setCellValue(jt_Regis_NM.getValueAt(j, k).toString());
                    }
                }
            }
            int instancia_punto2 = archivo_actual.getNombre_archivo().indexOf('.');
            String nombre_archivo2 = archivo_actual.getNombre_archivo().substring(0, instancia_punto2) + ".xlsx";
            FileOutputStream out = new FileOutputStream(new File(nombre_archivo2));
            wb.write(out);
            wb.close();
            out.close();

            JOptionPane.showMessageDialog(this, "Exportado con exito");

        } catch (FileNotFoundException e) {
            //System.out.println(e);
        } catch (IOException io) {
            //System.out.println(io);
        }
    }//GEN-LAST:event_B_Expor_ExcelMouseClicked

    private void B_Crear_ArchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_Crear_ArchMouseClicked
        boolean flag = true;
        boolean salir = false;
        int campoIndex = -1;

        int instancia_punto3 = archivo_actual.getNombre_archivo().indexOf('.');
        String nombre_archivo_bin3 = "./" + archivo_actual.getNombre_archivo().substring(0, instancia_punto3) + "secundario" + ".bin";

        File archivo = new File(nombre_archivo_bin3);

        if (!archivo.exists()) {

            while (flag) {
                String nombre_campo;
                nombre_campo = JOptionPane.showInputDialog(this, "Escriba el nombre del campo para crear un arbol para indexar");

                if (nombre_campo == null) {
                    JOptionPane.showMessageDialog(this, "Se saldra de esta opcion");
                    flag = false;
                    salir = true;

                } else if (nombre_campo.isEmpty()) {

                    JOptionPane.showMessageDialog(this, "No ingreso el nombre de un campo!");

                } else if (nombre_campo.equalsIgnoreCase("Edad")) {

                    JOptionPane.showMessageDialog(this, "La edad no es un campo valido para indexar!");

                } else {
                    boolean found = false;
                    boolean esPrimaria = false;
                    //busqueda del campo en el array de campos
                    for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                        Campo temp = archivo_actual.getLista_campos().get(i);

                        if (nombre_campo.equals(temp.getNombre_Campo())) {

                            if (temp.isEsLlavePrimaria() == true) {
                                esPrimaria = true;

                            } else {
                                found = true;
                                campoIndex = i;
                            }
                        }

                    }

                    if (found) {

                        flag = false;

                    } else if (esPrimaria) {
                        JOptionPane.showMessageDialog(this, "El campo ingresado es llave primaria!");

                    } else {
                        JOptionPane.showMessageDialog(this, "El campo ingresado no existe en el archivo");
                    }
                }

            }

            if (!salir) {

                ArbolB arbolSecundario = new ArbolB(3);

                //arraylist que guardar todos los offsets en la busqueda de offsets del primer arbol
                ArrayList<Object> offsets = new ArrayList();

                int instancia_punto = archivo_actual.getNombre_archivo().indexOf('.');
                String nombre_archivo_bin = "./" + archivo_actual.getNombre_archivo().substring(0, instancia_punto) + ".bin";

                ArbolB arbolPrimario = cargarArbol(nombre_archivo_bin);

                arbolPrimario.getRegistersOffsets(offsets, arbolPrimario.getRaiz(), 0);

                RandomAccessFile raf;

                verifyArrayList(offsets);

                boolean termino = false;
                boolean noEsNumerico = false;

                try {
                    raf = new RandomAccessFile(archivo_actual.archivo, "rw");

                    raf.seek((long) offsets.get(0) + 1);

                    String prueba = raf.readLine();

                    int valor = getLlaveSecundaria(prueba, campoIndex);

                    if (valor == -1) {

                        noEsNumerico = true;

                    } else {
                        termino = generarArbolSecundario(offsets, raf, campoIndex, arbolSecundario);

                    }

                } catch (IOException e) {

                }

                if (termino) {

                    int instancia_punto2 = archivo_actual.getNombre_archivo().indexOf('.');
                    String nombre_archivo_bin2 = "./" + archivo_actual.getNombre_archivo().substring(0, instancia_punto2) + "secundario" + ".bin";

                    escribirArbol(arbolSecundario, nombre_archivo_bin2);

                    JOptionPane.showMessageDialog(this, "El arbol secundario ha sido creado exitosamente!");
                } else if (noEsNumerico) {
                    JOptionPane.showMessageDialog(this, "El campo ingresado a indexar no es numerica");
                } else {
                    JOptionPane.showMessageDialog(this, "Una llave se repitio, se cancela el proceso");
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "El archivo ya existe, use el metodo de reindexar!");
        }
    }//GEN-LAST:event_B_Crear_ArchMouseClicked

    private void B_ReIndex_ArchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_B_ReIndex_ArchMouseClicked
        int instancia_punto2 = archivo_actual.getNombre_archivo().indexOf('.');
        String nombre_archivo_bin2 = "./" + archivo_actual.getNombre_archivo().substring(0, instancia_punto2) + "secundario" + ".bin";
        File archivo = new File(nombre_archivo_bin2);

        int instancia = archivo_actual.getNombre_archivo().indexOf('.');
        String nombre_archivo_bin = "./" + archivo_actual.getNombre_archivo().substring(0, instancia_punto2) + ".bin";

        if (!archivo.exists()) {
            JOptionPane.showMessageDialog(this, "Use el metodo de Indexar para generar el arbol secundario!");
        } else {

            ArbolB arbol = cargarArbol(nombre_archivo_bin2);
            ArbolB arbol1 = cargarArbol(nombre_archivo_bin);

            RandomAccessFile raf;
            int campo_index = 0;

            int llave = arbol.retornarUnaLlave();

            String var = Integer.toString(llave);

            for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                Campo temp = archivo_actual.getLista_campos().get(i);

                if (temp.getLongitud() == var.length()) {
                    campo_index = temp.getLongitud();
                }
            }

            ArrayList<Object> offsets = new ArrayList();
            arbol1.getRegistersOffsets(offsets, arbol.getRaiz(), 0);

            boolean flag = false;
            ArbolB arbolNuevo = new ArbolB(3);

            try {

                raf = new RandomAccessFile(archivo_actual.getArchivo(), "rw");

                flag = generarArbolSecundario(offsets, raf, campo_index, arbolNuevo);

            } catch (IOException e) {

            }

            if (flag) {

                escribirArbol(arbolNuevo, nombre_archivo_bin2);

                JOptionPane.showMessageDialog(this, "El arbol secundario ha sido actualizado exitosamente!");
            }
        }
    }//GEN-LAST:event_B_ReIndex_ArchMouseClicked

    public void CrearXml(){
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            DOMImplementation implementation = builder.getDOMImplementation();
            int intancia_punto = archivo_actual.getNombre_archivo().indexOf('.');
            String NombreArchivo = archivo_actual.getNombre_archivo().substring(0, intancia_punto);
            NombreArchivo = NombreArchivo.replace('\0', ' ');//Quitar caracteres null
            NombreArchivo = NombreArchivo.replaceAll("\\s+", "");

            Document documento = implementation.createDocument(null, NombreArchivo, null);
            documento.setXmlVersion("1.0");

            Element Campos = documento.createElement("Campos");
            

            for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                Element Campo = documento.createElement("Campo");
                String NC = archivo_actual.getLista_campos().get(i).getNombre_Campo();
                String TD = archivo_actual.getLista_campos().get(i).getTipo_dato();
                String LG = Integer.toString(archivo_actual.getLista_campos().get(i).getLongitud());
                String LP = Boolean.toString(archivo_actual.getLista_campos().get(i).isEsLlavePrimaria());
               
                Element NombreCampo = documento.createElement("NombreDelCampo");
                Text txtNombre = documento.createTextNode(NC);
                NombreCampo.appendChild(txtNombre);

                Element TipoDato = documento.createElement("TipoDeDato");
                Text txtTDato = documento.createTextNode(TD);
                TipoDato.appendChild(txtTDato);

                Element Longitud = documento.createElement("Longitud");
                Text txtLong = documento.createTextNode(LG);
                Longitud.appendChild(txtLong);

                Element isKey = documento.createElement("EsLlavePrimaria");
                Text txtisKey = documento.createTextNode(LP);
                isKey.appendChild(txtisKey);
                Campo.appendChild(NombreCampo);
                Campo.appendChild(TipoDato);
                Campo.appendChild(Longitud);
                Campo.appendChild(isKey);
                Campos.appendChild(Campo);
            }
            
            documento.getDocumentElement().appendChild(Campos);
            Source source = new DOMSource(documento);
            Result result = new StreamResult(new File(NombreArchivo + ".xml"));

            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.transform(source, result);

        } catch (ParserConfigurationException | TransformerException ex) {
            System.out.println(ex.getMessage());
        }

    }
    
    public void CrearXSLT(){
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            DOMImplementation implementation = builder.getDOMImplementation();
            int intancia_punto = archivo_actual.getNombre_archivo().indexOf('.');
            String NombreArchivo = archivo_actual.getNombre_archivo().substring(0, intancia_punto);

            Document documento = implementation.createDocument(null, NombreArchivo, null);
            documento.setXmlVersion("1.0");
            
            Element stylesh = documento.createElement("xsl:stylesheet");
            stylesh.setAttribute("xmlns:xsl", "http://www.w3.org/1999/XSL/Transform");
            stylesh.setAttribute("version", "1.0");
            Element templ = documento.createElement("xsl:template");
            templ.setAttribute("match", "/");
            
            Element Ehtml = documento.createElement("html");
                Element Ehead = documento.createElement("head");
                    Element Etitle = documento.createElement("title");
                    Text txtTitle = documento.createTextNode(NombreArchivo);
                    Etitle.appendChild(txtTitle);
                    Ehead.appendChild(Etitle);
                Element Ebody = documento.createElement("body");
                    Element Etable = documento.createElement("table"); 
                    Etable.setAttribute("border", "1");
                    Element Etr1 = documento.createElement("tr");
                    
                    for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                        Element Eth = documento.createElement("th"); 
                        Text txtth = documento.createTextNode(archivo_actual.getLista_campos().get(i).getNombre_Campo());
                        Eth.appendChild(txtth); 
                        Etr1.appendChild(Eth);
                    }
                    Etable.appendChild(Etr1); 
                Element HeadData = documento.createElement("xsl:for-each");
                HeadData.setAttribute("select", "campos/campo");
                Element Etr2 = documento.createElement("tr"); 
                
                for (int i = 0; i < archivo_actual.getLista_campos().size(); i++) {
                        Element Etd = documento.createElement("td"); 
                        Element Value = documento.createElement("xsl:value-of");
                        Value.setAttribute("select", archivo_actual.getLista_campos().get(i).getNombre_Campo());
                        Text txtth = documento.createTextNode(archivo_actual.getLista_campos().get(i).getNombre_Campo());
                        Etd.appendChild(Value); 
                        Etr2.appendChild(Etd);
                }
                HeadData.appendChild(Etr2); 
            Etable.appendChild(HeadData);
            Ebody.appendChild(Etable);
            Ehtml.appendChild(Ebody);
            templ.appendChild(Ehtml);
            stylesh.appendChild(templ);
            
            documento.getDocumentElement().appendChild(stylesh);
            Source source = new DOMSource(documento);
            Result result = new StreamResult(new File(NombreArchivo + ".xsl"));

            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.transform(source, result);

        } catch (ParserConfigurationException | TransformerException ex) {
            System.out.println(ex.getMessage());
        }

    }
    
    public boolean crearArbolIndexar(ArrayList<Long> offsets, int campo_index, ArbolB arbolSecundario, RandomAccessFile raf, int i) {

        if (i >= offsets.size()) {
            //termine la recursion aqui

            if (i > offsets.size()) {
                return false;
            } else {
                return true;
            }

        } else {
            String registro;
            try {
                Llave llave = null;
                Llave buscar = null;
                raf.seek(offsets.get(i) + 1);
                registro = raf.readLine();

                int llave_secundaria = getLlaveSecundaria(registro, campo_index);

                llave = new Llave(offsets.get(i), llave_secundaria);

                buscar = arbolSecundario.buscarLlave(arbolSecundario.getRaiz(), llave_secundaria);

                if (buscar == null) {

                    i += offsets.size();

                } else {
                    arbolSecundario.insert(llave);
                }

            } catch (IOException e) {

            } catch (NullPointerException e) {

            }

            return crearArbolIndexar(offsets, campo_index, arbolSecundario, raf, i + 1);
        }

    }

    public void verifyArrayList(ArrayList<Object> offsets) {

        for (int i = 0; i < offsets.size(); i++) {

            for (int j = i + 1; j < offsets.size(); j++) {

                if (offsets.get(i).equals(offsets.get(j))) {
                    System.out.println(offsets.get(i) + "== " + offsets.get(j));
                }
            }
        }
    }

    public int getLlaveSecundaria(String registro, int campo_index) {

        registro = registro.replace('\0', ' ');
        registro = registro.replaceAll("\\s+", "");

        int flag = 0;

        String resultante = "";

        for (int i = 0; i < registro.length(); i++) {

            char x = registro.charAt(i);

            if (x == '|') {
                flag++;
            }

            if (flag == campo_index && x != '|') {
                resultante += x;
            }
        }

        int var = 0;

        try {
            var = Integer.parseInt(resultante);

        } catch (NumberFormatException e) {
            var = -1;
        }

        return var;

    }

    public boolean generarArbolSecundario(ArrayList<Object> offsets, RandomAccessFile raf, int campo_index, ArbolB segundo_arbol) {

        Llave llave;

        boolean termino = false;
        int i;

        for (i = 0; i < offsets.size(); i++) {

            try {
                long pointer = (long) (offsets.get(i));

                raf.seek((long) (offsets.get(i)) + 1);

                String registro = raf.readLine();

                int llave_secundaria = getLlaveSecundaria(registro, campo_index);

                llave = segundo_arbol.buscarLlave(segundo_arbol.getRaiz(), llave_secundaria);

                if (llave == null) {

                    llave = new Llave(pointer, llave_secundaria);
                    segundo_arbol.insert(llave);

                } else {
                    //System.out.println(llave.getLlave() + " ," + llave_secundaria);

                    break;
                }

            } catch (IOException e) {

            }

        }

        //System.out.println(i);

        if (i == offsets.size()) {
            termino = true;
        }

        return termino;
    }

    public void generarPersonalizados(int size) {

        Archivo archivo = new Archivo("./FilePersonalizado.txt");
        archivo.setNombre_archivo("FilePersonalizado.txt");
        Lista_Archivos.add(archivo);
        ArbolB arbol = new ArbolB(3);

        archivo.getLista_campos().add(new Campo("Id", "int", 8));
        archivo.getLista_campos().get(0).setEsLlavePrimaria(true);
        archivo.getLista_campos().add(new Campo("Nombre", "String", 15));
        archivo.getLista_campos().get(1).setEsLlavePrimaria(false);
        archivo.getLista_campos().add(new Campo("Apellido", "String", 20));
        archivo.getLista_campos().get(2).setEsLlavePrimaria(false);
        archivo.getLista_campos().add(new Campo("Telefono", "int", 9));
        archivo.getLista_campos().get(3).setEsLlavePrimaria(false);
        archivo.getLista_campos().add(new Campo("Ciudad", "String", 20));
        archivo.getLista_campos().get(3).setEsLlavePrimaria(false);

        escribirArchivo(archivo);

        String[] nombres = {"Sophia", "Liam", "Olivia", "Noah", "Riley", "Jackson",
            "Emma", "Aiden", "Ava", "Elias", "Isabella", "Gonzalo", "Ariela", "Lucas",
            "Beatriz", "Oliver", "Amalia", "Juan", "Mia", "Mateo", "Layla", "Marco",
            "Zoe", "Mason", "Camila", "Carlos", "Charlotte", "Karl", "Iliana", "Ethan",
            "Mila", "Sebastian", "Lily", "James", "Luna", "Michael", "Ana", "Benjamin",
            "Evelyn", "Logan", "Harper", "Leo", "Liliana", "Luca", "Ela", "Alexander",
            "Chloe", "Daniel", "Adalyn", "Josiah", "Charlie", "Henry", "Isla", "Jayce",
            "Ellie", "Julian", "Leah", "Jack", "Nora", "Ryan", "Scarlett", "Jacob",
            "Maya", "Asher", "Abigail", "Wyatt", "Madison", "William", "Aubrey", "Owen",
            "Emily", "Gabriel", "Kinsley", "Miles", "Elena", "Lincoln", "Paisely", "Ezra",
            "Madelyn", "Isaias", "Aurora", "Luke", "Peyton", "Cameron", "Nova", "Caleb",
            "Emilia", "Isaac", "Hannah", "Carson", "Sarah", "Samuel", "Ariana", "Colton",
            "Penny", "Maverick", "Lila", "Mathew", "Valeria", "Miguel"};

        ArrayList<String> names = new ArrayList();

        names.addAll(Arrays.asList(nombres));

        String[] apellidos = {"Smith", "Hall", "Stewart", "Price", "Johnson",
            "Allen", "Sanchez", "Bennett", "William", "Young", "Morris", "Wood",
            "Jones", "Hernandez", "Rogers", "Barnes", "Brown", "King", "Reed", "Ross",
            "Davis", "Wright", "Cook", "Henderson", "Miller", "Lopez", "Morgan", "Coleman",
            "Wilson", "Hill", "Bell", "Jenkins", "Moore", "Scott", "Murphy", "Perry",
            "Taylor", "Green", "Bailey", "Powell", "Anderson", "Rivera", "Adams", "Long",
            "Thomas", "Baker", "Cooper", "Patterson", "Jackson", "Gonzales", "Richardson",
            "Hughes", "White", "Nelson", "Cox", "Flores", "Harris", "Carter", "Howard",
            "Washington", "Martin", "Mitchell", "Ward", "Butler", "Thompson", "Perez",
            "Torres", "Simmons", "Garcia", "Roberts", "Peterson", "Foster", "Martinez",
            "Gray", "Turner", "Rojas", "Robinson", "Philips", "Ramirez", "Bryant",
            "Clark", "Campbell", "James", "Alexander", "Rodriguez", "Parker", "Watson",
            "Russell", "Lewis", "Evans", "Brooks", "Griffin", "Lee", "Edwards", "Kelly",
            "Diaz", "Walker", "Collins", "Sanders", "Hayes"};

        //lista de apellidos
        ArrayList<String> surenames = new ArrayList();
        surenames.addAll(Arrays.asList(apellidos));

        //generador de identificaciones
        ArrayList<String> id = new ArrayList();
        id.add("8");
        id.add("1");
        id.add("2");
        id.add("3");
        id.add("4");
        id.add("5");
        id.add("6");
        id.add("7");

        //generador de numeros de telefono
        ArrayList<String> tel = new ArrayList();
        tel.add("1");
        tel.add("2");
        tel.add("3");
        tel.add("4");
        tel.add("5");
        tel.add("6");
        tel.add("7");
        tel.add("8");
        tel.add("9");

        //ciudades donde viven
        String[] ciudades = {"New York", "Chicago", "Los Angeles", "Houston",
            "Phoenix", "Philadelphia", "San Antonio", "San Diego", "Austin", "Forthworth",
            "Jacksonville", "Columbus", "Charlotte", "Indianapolis", "San Francisco",
            "Seattle", "Denver", "Washington", "Boston", "El Paso", "Nashville",
            "Detroit", "Las Vegas", "Oklahoma City", "Portland", "Memphis", "Louisville",
            "Milwaukee", "Baltimore", "Albuquerque", "Tucson", "Fresno", "Mesa", "Sacramento",
            "Atlanta", "Kansas City", "Colorado Springs", "Omaha", "Raleigh", "Miami",
            "Long Beach", "Minneapolis", "Oakland", "Tampa", "Tulsa", "Arlington", "Wichita",
            "New Orleans", "Bakersfield", "Cleveland", "Anaheim", "Honolulu",
            "Santa Ana", "Riverside", "Henderson", "Lexington", "Stockton", "Saint Paul",
            "Cincinnati", "Pittsburg", "Copan", "Tegucigalpa", "Fairbanks", "Palmer",
            "Homer", "Haines", "Cordova", "Batesville", "Benton", "Conway", "Newport",
            "Alameda", "Belmont", "Carlsbad", "Fairfield", "Fermont", "Redlands",
            "Salinas", "Victorville", "Sterling", "Derby", "Enfield", "Manchester",
            "Milford", "Norwalk", "Orange", "WestPort", "Windham", "Clearwater", "Hollywood",
            "Homestead", "Sanford", "Sebring", "Augusta", "Dalton", "Marietta",
            "Roma", "Waycross", "Boise", "Rexburg"};

        ArrayList<String> cities = new ArrayList();
        cities.addAll(Arrays.asList(ciudades));

        int randNum;
        int randCity;
        int numTel = 0;
        int numId = 0;
        Random r = new Random();

        ArrayList<Integer> telephone = new ArrayList();
        ArrayList<Integer> ids = new ArrayList();

        RandomAccessFile raf = null;

        try {
            raf = new RandomAccessFile(archivo.getArchivo(), "rw");
            raf.seek(raf.length());

            //ciclo que crea los registros
            for (int i = 0; i < size; i++) {
                randNum = 0 + r.nextInt(99);
                randCity = 0 + r.nextInt(99);

                Collections.shuffle(id);
                Collections.shuffle(tel);
                Collections.shuffle(names);
                Collections.shuffle(surenames);

                String var = "";
                //ciclo que brinda el numero de telefono 
                for (int j = 0; j < tel.size(); j++) {
                    var += tel.get(j);
                }
                numTel = Integer.parseInt(var);
                var = "";

                for (int k = 0; k < id.size(); k++) {
                    var += id.get(k);
                }
                numId = Integer.parseInt(var);

                //verify telephone
                boolean flag = true;

                while (flag) {

                    int contador = 0;
                    for (int j = 0; j < telephone.size(); j++) {

                        if (numTel == telephone.get(j)) {
                            contador++;
                            break;
                        }
                    }

                    if (contador == 0) {
                        flag = false;
                    } else {
                        var = "";
                        Collections.shuffle(tel);

                        //ciclo que brinda el numero de telefono 
                        for (int j = 0; j < tel.size(); j++) {
                            var += tel.get(j);
                        }

                        numTel = Integer.parseInt(var);
                    }
                }

                //verify Id
                flag = true;
                while (flag) {

                    int contador = 0;
                    for (int j = 0; j < ids.size(); j++) {

                        if (numId == ids.get(j)) {
                            contador++;
                            break;
                        }
                    }

                    if (contador == 0) {
                        flag = false;
                    } else {
                        var = "";
                        Collections.shuffle(id);

                        //ciclo que brinda el numero de telefono 
                        for (int j = 0; j < id.size(); j++) {
                            var += id.get(j);
                        }

                        numId = Integer.parseInt(var);
                    }
                }

                long pointer = raf.getFilePointer();
                Llave llave = new Llave(pointer, numId);

                arbol.insert(llave);

                String n = Integer.toString(numId);
                String t = Integer.toString(numTel);

                raf.writeChars(n + "|" + fixLength(names.get(randNum), 15) + "|"
                        + fixLength(surenames.get(randNum), 20) + "|" + t + "|"
                        + fixLength(cities.get(randCity), 20) + "| \n");

                ids.add(numId);
                telephone.add(numTel);

            }

            raf.close();

        } catch (IOException e) {

        }

        int instancia_punto2 = archivo.getNombre_archivo().indexOf('.');
        String nombre_archivo_bin2 = "./" + archivo.getNombre_archivo().substring(0, instancia_punto2) + ".bin";

        escribirArbol(arbol, nombre_archivo_bin2);

    }

    public void generarCityFile(Archivo archivo, ArrayList<Integer> cityIds) {
        //ciudades donde viven
        String[] ciudades = {"New York", "Chicago", "Los Angeles", "Houston",
            "Phoenix", "Philadelphia", "San Antonio", "San Diego", "Austin", "Forthworth",
            "Jacksonville", "Columbus", "Charlotte", "Indianapolis", "San Francisco",
            "Seattle", "Denver", "Washington", "Boston", "El Paso", "Nashville",
            "Detroit", "Las Vegas", "Oklahoma City", "Portland", "Memphis", "Louisville",
            "Milwaukee", "Baltimore", "Albuquerque", "Tucson", "Fresno", "Mesa", "Sacramento",
            "Atlanta", "Kansas City", "Colorado Springs", "Omaha", "Raleigh", "Miami",
            "Long Beach", "Minneapolis", "Oakland", "Tampa", "Tulsa", "Arlington", "Wichita",
            "New Orleans", "Bakersfield", "Cleveland", "Anaheim", "Honolulu",
            "Santa Ana", "Riverside", "Henderson", "Lexington", "Stockton", "Saint Paul",
            "Cincinnati", "Pittsburg", "Copan", "Tegucigalpa", "Fairbanks", "Palmer",
            "Homer", "Haines", "Cordova", "Batesville", "Benton", "Conway", "Newport",
            "Alameda", "Belmont", "Carlsbad", "Fairfield", "Fermont", "Redlands",
            "Salinas", "Victorville", "Sterling", "Derby", "Enfield", "Manchester",
            "Milford", "Norwalk", "Orange", "WestPort", "Windham", "Clearwater", "Hollywood",
            "Homestead", "Sanford", "Sebring", "Augusta", "Dalton", "Marietta",
            "Roma", "Waycross", "Boise", "Rexburg"};

        ArrayList<String> cities = new ArrayList();
        cities.addAll(Arrays.asList(ciudades));

        ArbolB arbol = new ArbolB(3);

        archivo.getLista_campos().add(new Campo("CityId", "int", 2));
        archivo.getLista_campos().get(0).setEsLlavePrimaria(true);
        archivo.getLista_campos().add(new Campo("CityName", "String", 30));
        archivo.getLista_campos().get(1).setEsLlavePrimaria(false);

        escribirArchivo(archivo);

        Collections.shuffle(cities);

        RandomAccessFile raf;
        Llave llave;
        try {
            raf = new RandomAccessFile(archivo.getArchivo(), "rw");
            raf.seek(raf.length());

            for (int i = 0; i < 100; i++) {

                long pointer = raf.getFilePointer();

                llave = new Llave(pointer, cityIds.get(i));

                arbol.insert(llave);

                String var = Integer.toString(cityIds.get(i));

                raf.writeChars(fixLength(var, 2) + "|" + fixLength(cities.get(i), 30) + "| \n");

            }

            raf.close();

            int instancia_punto2 = archivo.getNombre_archivo().indexOf('.');
            String nombre_archivo_bin2 = "./" + archivo.getNombre_archivo().substring(0, instancia_punto2) + ".bin";

            escribirArbol(arbol, nombre_archivo_bin2);

        } catch (IOException e) {

        }
    }

    public ArrayList<Integer> generarPersonFile(Archivo archivo) {
        ArbolB arbol = new ArbolB(3);
        ArrayList<Integer> cityids = new ArrayList();

        //crear campos
        archivo.getLista_campos().add(new Campo("PersonId", "int", 6));
        archivo.getLista_campos().get(0).setEsLlavePrimaria(true);
        archivo.getLista_campos().add(new Campo("PersonName", "String", 20));
        archivo.getLista_campos().get(1).setEsLlavePrimaria(false);
        archivo.getLista_campos().add(new Campo("PersonAge", "int", 3));
        archivo.getLista_campos().get(2).setEsLlavePrimaria(false);
        archivo.getLista_campos().add(new Campo("CityId", "int", 2));
        archivo.getLista_campos().get(3).setEsLlavePrimaria(false);

        escribirArchivo(archivo);

        String[] nombres = {"Sophia", "Liam", "Olivia", "Noah", "Riley", "Jackson",
            "Emma", "Aiden", "Ava", "Elias", "Isabella", "Gonzalo", "Ariela", "Lucas",
            "Beatriz", "Oliver", "Amalia", "Juan", "Mia", "Mateo", "Layla", "Marco",
            "Zoe", "Mason", "Camila", "Carlos", "Charlotte", "Karl", "Iliana", "Ethan",
            "Mila", "Sebastian", "Lily", "James", "Luna", "Michael", "Ana", "Benjamin",
            "Evelyn", "Logan", "Harper", "Leo", "Liliana", "Luca", "Ela", "Alexander",
            "Chloe", "Daniel", "Adalyn", "Josiah", "Charlie", "Henry", "Isla", "Jayce",
            "Ellie", "Julian", "Leah", "Jack", "Nora", "Ryan", "Scarlett", "Jacob",
            "Maya", "Asher", "Abigail", "Wyatt", "Madison", "William", "Aubrey", "Owen",
            "Emily", "Gabriel", "Kinsley", "Miles", "Elena", "Lincoln", "Paisely", "Ezra",
            "Madelyn", "Isaias", "Aurora", "Luke", "Peyton", "Cameron", "Nova", "Caleb",
            "Emilia", "Isaac", "Hannah", "Carson", "Sarah", "Samuel", "Ariana", "Colton",
            "Penny", "Maverick", "Lila", "Mathew", "Valeria", "Miguel"};

        ArrayList<String> names = new ArrayList();

        names.addAll(Arrays.asList(nombres));

        Integer[] indicesCiudades = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,
            19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
            43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
            68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,
            94, 95, 96, 97, 98, 99};

        cityids.addAll(Arrays.asList(indicesCiudades));

        String[] apellidos = {"Smith", "Hall", "Stewart", "Price", "Johnson",
            "Allen", "Sanchez", "Bennett", "William", "Young", "Morris", "Wood",
            "Jones", "Hernandez", "Rogers", "Barnes", "Brown", "King", "Reed", "Ross",
            "Davis", "Wright", "Cook", "Henderson", "Miller", "Lopez", "Morgan", "Coleman",
            "Wilson", "Hill", "Bell", "Jenkins", "Moore", "Scott", "Murphy", "Perry",
            "Taylor", "Green", "Bailey", "Powell", "Anderson", "Rivera", "Adams", "Long",
            "Thomas", "Baker", "Cooper", "Patterson", "Jackson", "Gonzales", "Richardson",
            "Hughes", "White", "Nelson", "Cox", "Flores", "Harris", "Carter", "Howard",
            "Washington", "Martin", "Mitchell", "Ward", "Butler", "Thompson", "Perez",
            "Torres", "Simmons", "Garcia", "Roberts", "Peterson", "Foster", "Martinez",
            "Gray", "Turner", "Rojas", "Robinson", "Philips", "Ramirez", "Bryant",
            "Clark", "Campbell", "James", "Alexander", "Rodriguez", "Parker", "Watson",
            "Russell", "Lewis", "Evans", "Brooks", "Griffin", "Lee", "Edwards", "Kelly",
            "Diaz", "Walker", "Collins", "Sanders", "Hayes"};

        //lista de apellidos
        ArrayList<String> surenames = new ArrayList();
        surenames.addAll(Arrays.asList(apellidos));

        Random r = new Random();

        ArrayList<String> ids = new ArrayList();

        RandomAccessFile raf;

        int randNum = 0;

        Llave llave;

        try {
            Collections.shuffle(cityids);
            raf = new RandomAccessFile(archivo.getArchivo(), "rw");
            
            raf.seek(raf.length());

            for (int i = 0; i < 100; i++) {

                ids.add(Integer.toString((1 + r.nextInt(9))));
                ids.add(Integer.toString((1 + r.nextInt(9))));
                ids.add(Integer.toString((1 + r.nextInt(9))));
                ids.add(Integer.toString((1 + r.nextInt(9))));
                ids.add(Integer.toString((1 + r.nextInt(9))));
                ids.add(Integer.toString((1 + r.nextInt(9))));

                String var = "";
                for (int j = 0; j < ids.size(); j++) {
                    var += ids.get(j);
                }

                int id = Integer.parseInt(var);
                ids.clear();

                randNum = 0 + r.nextInt(99);

                Llave prueba;

                prueba = arbol.buscarLlave(arbol.getRaiz(), id);
                //verificar que el id no se repita
                while (prueba != null) {
                    ids.clear();
                    ids.add(Integer.toString(1 + r.nextInt(9)));
                    ids.add(Integer.toString(1 + r.nextInt(9)));
                    ids.add(Integer.toString(1 + r.nextInt(9)));
                    ids.add(Integer.toString(1 + r.nextInt(9)));
                    ids.add(Integer.toString(1 + r.nextInt(9)));
                    ids.add(Integer.toString(1 + r.nextInt(9)));

                    var = "";
                    for (int j = 0; j < ids.size(); i++) {
                        var += ids.get(i);
                    }

                    id = Integer.parseInt(var);

                    prueba = arbol.buscarLlave(arbol.getRaiz(), id);
                }

                int ciudad;

                long pointer = raf.getFilePointer();
                llave = new Llave(pointer, id);

                arbol.insert(llave);
                int age = 1 + r.nextInt(115);

                String a = Integer.toString(age);
                String c = Integer.toString(cityids.get(i));

                raf.writeChars(id + "|" + fixLength(names.get(randNum), 20)
                        + "|" + fixLength(a, 3) + "|"
                        + fixLength(c, 2) + "| \n");

            }

            raf.close();

            int instancia_punto2 = archivo.getNombre_archivo().indexOf('.');
            String nombre_archivo_bin2 = "./" + archivo.getNombre_archivo().substring(0, instancia_punto2) + ".bin";

            escribirArbol(arbol, nombre_archivo_bin2);

        } catch (Exception e) {

        }

        return cityids;
    }

    public void escribirArchivo(Archivo archivo) {
        archivo.setGuardado(true);
        RandomAccessFile raf;

        try {
            raf = new RandomAccessFile(archivo.getArchivo(), "rw");

            //Escritura de los campos en metadata
            String nombre, tipo, longitud, esllave;
            if (archivo.getLista_campos().isEmpty()) {
                //do nothing 
            } else {

                raf.seek(0);
                //imprimir el numero de campos del archivo para su correcta lectura
                raf.writeChars(archivo.getLista_campos().size() + "\n");

                for (int i = 0; i < archivo.getLista_campos().size(); i++) {
                    Campo temp = archivo.getLista_campos().get(i);
                    nombre = temp.getNombre_Campo();
                    tipo = temp.getTipo_dato();
                    longitud = Integer.toString(temp.getLongitud());
                    if (temp.isEsLlavePrimaria()) {
                        esllave = "true";
                    } else {
                        esllave = "false";
                    }

                    raf.writeChars("{Nombre:" + nombre + ",Tipo:" + tipo
                            + ",Longitud:" + longitud + ",EsLlave:" + esllave + "}");
                    raf.writeChars("\n");
                }

                //escritura de la ultima fecha de modificacion/apertura
                Date d = new Date();
                raf.writeChars(d.toString() + "\n");
                //TODO escritura de la cantidad de registros
                int num_registros = -1;
                num_registros = actualizar_numRegistros(1);
                if (num_registros == -1) {
                    raf.writeChars(("Numero de Registros:100\n"));
                } else {
                    raf.writeChars(("Numero de Registros:" + num_registros + "\n"));
                }
                //TODO escribir la punta de reconstruccion availlist
                actualizar_AvailList(archivo);
                
               
            }

            raf.close();
        } catch (Exception e) {

        }
    }

    public String fixLength(String registro, int longitud) {

        int length = longitud - registro.length();

        for (int i = 0; i < length; i++) {
            registro += " ";
        }

        return registro;
    }

    public boolean validarEntradaRegistro(String entrada, Campo campo_temp) {
        boolean temp = true;
        //Este metodo es para validacion de datos que no son la llave primaria
        //1. Validar que no retorne null

        if (entrada == null) {
            temp = true;
        } else {
            //2. Validar que no deje dato en blanco
            if (entrada.equals("")) {
                JOptionPane.showMessageDialog(jP_menuArchivo, "No puede dejar en blanco la informacion.");
                temp = false;
            }

            //3.Verificacion no puede poner el delimitador  '|' en el dato
            if (entrada.contains("|")) {
                JOptionPane.showMessageDialog(jP_menuArchivo, "No es permitido utilizar el caracter '|' en este programa.");
                temp = false;
            }
            //4.Verificacion que ingrese el tipo de dato correcto    
            if (campo_temp.getTipo_dato().equals("int")) {
                try {
                    Integer.parseInt(entrada);
                    //valor_primaryKey = Integer.parseInt(entrada);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(jP_menuArchivo, "El tipo de dato ingresado es incorrecto, debe ser un int.");
                    temp = false;
                }

            } else if (campo_temp.getTipo_dato().equals("char")) {
                if (entrada.length() > 1) {
                    JOptionPane.showMessageDialog(jP_menuArchivo, "Un dato char solo recibe un valor de entrada.");
                    temp = false;
                }

            } else if (campo_temp.getTipo_dato().equals("double")) {
                try {
                    Double.parseDouble(entrada);
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(jP_menuArchivo, "El tipo de dato ingresado es incorrecto, debe ser un double");
                    temp = false;
                }

            } else if (campo_temp.getTipo_dato().equals("String")) {
                if (campo_temp.isEsLlavePrimaria()) {
                    try {
                        Integer.parseInt(entrada);
                        //valor_primaryKey = Integer.parseInt(porcion_registro);
                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(jP_menuArchivo, "El tipo de dato ingresado es incorrecto, la llave primaria debe ser un numero");
                        temp = false;
                    }
                } else {/*do nothing*/
                }
            }
            //5. Validar longitud de campo
            if (entrada.length() > campo_temp.getLongitud()) {
                JOptionPane.showMessageDialog(jP_menuArchivo, "El dato ingresado es mayor a la longitud requerida del campo.\n"
                        + "Debe volver a ingresar el dato.");
                temp = false;
            }

            //6. Revisar que llene el espacio si el campo es llave_primaria
            if (entrada.length() != campo_temp.getLongitud() && campo_temp.isEsLlavePrimaria()) {
                JOptionPane.showMessageDialog(jP_menuArchivo, "La longitud del registro a buscar no es la requerida.");
                temp = false;
            }

        }
        return temp;

    }
    
    public void actualizar_AvailList(Archivo archivo){
        //Revisar existe la cabeza del availList        
        RandomAccessFile raf;
        try {
            raf = new RandomAccessFile(archivo.getArchivo(), "rw");
            raf.seek(0);//Empezar en 0
            int lineas_recorrer = Character.getNumericValue(raf.readChar()) + 2;

            //Obtener linea de metadata para leer el valor si hay
            long inicio_busqueda = 0;
            String metadata = "";
            for (int i = 0; i <= lineas_recorrer; i++) {
                metadata = raf.readLine();
                inicio_busqueda = raf.getFilePointer();
            }
            
            raf.seek(inicio_busqueda);
            
            if(archivo.getAvail_list().isEmpty()){  
                //System.out.println("Hola23");
                raf.writeChars("Cabeza de AvailList:null\n\n");
            } else {
                raf.writeChars("Cabeza de AvailList:" +archivo_actual.getAvail_list().get(0)+"\n\n");
            }
        } catch (Exception e) {
        }
            
    }

    public void recreacion_AvailList(Archivo archivo) {

        //Revisar existe la cabeza del availList        
        RandomAccessFile raf;
        try {
            raf = new RandomAccessFile(archivo.getArchivo(), "rw");
            raf.seek(0);//Empezar en 0
            int lineas_recorrer = Character.getNumericValue(raf.readChar()) + 3;

            //Obtener linea de metadata para leer el valor si hay
            long inicio_busqueda = 0;
            String metadata = "";
            for (int i = 0; i <= lineas_recorrer; i++) {
                metadata = raf.readLine();
                inicio_busqueda = raf.getFilePointer();
            }
            raf.readLine();
            raf.seek(raf.getFilePointer());
            //Obtener string sin espacios
            metadata = metadata.replace('\0', ' ');//Quitar caracteres null
            metadata = metadata.replaceAll("\\s+", "");
            metadata = metadata.substring(18);
            if (metadata.equals("null")) {
                //No hay cabeza del availList
            } else {
                
                //Existe una cabeza del availList, buscar en el archivo registros eliminado
                long record_size = 0;
                for (int i = 0; i < archivo.getLista_campos().size(); i++) {
                    record_size += (long) archivo.getLista_campos().get(i).getLongitud() + 1;
                }
                record_size = (record_size * 2) + 4;// Multiplicar x2 por el write chars
                //Revisar hasta el final del archivo
                long inicio_registro = raf.getFilePointer();//Inicio de Registro
                inicio_busqueda = Long.valueOf(metadata);//Cabeza de Metadata
                long cabeza_metadata = inicio_busqueda;

                //Posicionar el seek en la el primer slot eliminado
                raf.seek(inicio_busqueda);
                while (inicio_busqueda < raf.length()) {
                    if (raf.readChar() == '*') {
                        long posicion = raf.getFilePointer();
                        archivo.getAvail_list().add(posicion);
                    }
                    inicio_busqueda += record_size;
                    raf.seek(inicio_busqueda);
                }

                //Recorrer el inicio hasta la cabeza por si existen slots disponibles antes de la cabeza
                raf.seek(inicio_registro);

                while (inicio_registro < cabeza_metadata) {
                    if (raf.readChar() == '*') {
                        long posicion = raf.getFilePointer();
                        archivo.getAvail_list().add(posicion);
                    }
                    inicio_registro += record_size;
                    raf.seek(inicio_registro);
                }
                
                System.out.println(archivo.getAvail_list().size());

            }
        } catch (Exception e) {
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton B_Abrir_Arch;
    private javax.swing.JButton B_Borrar_Campo;
    private javax.swing.JButton B_Borrar_Regis;
    private javax.swing.JButton B_Buscar_Regis;
    private javax.swing.JButton B_Cerrar_Arch;
    private javax.swing.JButton B_Crear_Arch;
    private javax.swing.JButton B_Crear_Campo;
    private javax.swing.JButton B_Expo_XML;
    private javax.swing.JButton B_Expor_Excel;
    private javax.swing.JButton B_Intro_Regis;
    private javax.swing.JButton B_Listar_Campo;
    private javax.swing.JButton B_Listar_Regis;
    private javax.swing.JButton B_Mod_Campo;
    private javax.swing.JButton B_Modi_Regis;
    private javax.swing.JButton B_Nuevo_Arch;
    private javax.swing.JButton B_ReIndex_Arch;
    private javax.swing.JButton B_Salir;
    private javax.swing.JButton B_Salvar_Arch;
    private javax.swing.ButtonGroup BgLlavePrimaria;
    private javax.swing.JFrame TablaRegis_NoSeMuestra;
    private javax.swing.JButton b_introducirRegistro;
    private javax.swing.JComboBox<String> cb_tipoCampo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jP_crearCampo;
    private javax.swing.JPanel jP_introducirRegistro;
    private javax.swing.JPanel jP_menuArchivo;
    private javax.swing.JPanel jP_tabla_ListarCampos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTP_Menus;
    private javax.swing.JTree jT_Archivos;
    private javax.swing.JButton jb_RegistrosPruebas;
    private javax.swing.JButton jb_abrirArchivo;
    private javax.swing.JButton jb_crearCampo;
    private javax.swing.JButton jb_modCampo;
    private javax.swing.JButton jb_salirAbrirArchivo;
    private javax.swing.JDialog jd_abrirArchivo;
    private javax.swing.JDialog jd_buscarRegistro;
    private javax.swing.JDialog jd_crearCampo;
    private javax.swing.JDialog jd_introducirRegistro;
    private javax.swing.JDialog jd_modificarRegistro;
    private javax.swing.JLabel jl_CrearCampo;
    private javax.swing.JLabel jl_Longitud;
    private javax.swing.JLabel jl_NombredeCampo;
    private javax.swing.JLabel jl_Registro;
    private javax.swing.JLabel jl_TipodeDato;
    private javax.swing.JLabel jl_nombre_archivo;
    private javax.swing.JLabel jl_tituloCampos;
    private javax.swing.JPanel jp_Campos;
    private javax.swing.JPanel jp_Registro;
    private javax.swing.JRadioButton jr_llaveNo;
    private javax.swing.JRadioButton jr_llaveSi;
    private javax.swing.JSpinner js_longitud;
    private javax.swing.JTable jt_Regis_NM;
    private javax.swing.JTable jt_Registro;
    private javax.swing.JTextField jt_nombreCampo;
    private javax.swing.JTable table_ListarCampos;
    private javax.swing.JTextField tf_introducirRegistro;
    private javax.swing.JTextField tf_modificarRegistro;
    // End of variables declaration//GEN-END:variables

    //Variables locales
    DefaultMutableTreeNode nodo_seleccionado = null;
    int campo_seleccionado = 0;

    public void refrescarJTree() {
        DefaultTreeModel m = (DefaultTreeModel) jT_Archivos.getModel();
        DefaultMutableTreeNode raiz = (DefaultMutableTreeNode) m.getRoot();
        DefaultMutableTreeNode nodo_archivo;

        //Dejar limpio el arbol al actualizar
        raiz.removeAllChildren();
        m.reload();

        for (int i = 0; i < Lista_Archivos.size(); i++) {
            nodo_archivo = new DefaultMutableTreeNode(Lista_Archivos.get(i));
            raiz.add(nodo_archivo);
        }
        m.reload();
    }

    public void refrescarTabla() {

        table_ListarCampos.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Nombre", "Tipo de Dato", "Longitud", "Es llave Primaria"
                }
        ));

        DefaultTableModel model = (DefaultTableModel) table_ListarCampos.getModel();

        for (Campo c : archivo_actual.getLista_campos()) {
            Object[] obj = {c.getNombre_Campo(), c.getTipo_dato(), Integer.toString(c.getLongitud()), c.isEsLlavePrimaria()};
            model.addRow(obj);
        }
        table_ListarCampos.setModel(model);
    }

    public int actualizar_numRegistros(int opcion) {
        int temp = -1;
        try {
            RandomAccessFile raf = new RandomAccessFile(archivo_actual.getArchivo(), "rw");
            int num_lineas = archivo_actual.getLista_campos().size() + 2;
            String linea_overwrite = "";

            int i = 0;
            long posicion_line = 0;
            raf.seek(0);
            while (i <= num_lineas) {
                posicion_line = raf.getFilePointer();
                linea_overwrite = raf.readLine();
                
                linea_overwrite = linea_overwrite.replace('\0', ' ');//Quitar caracteres null
                linea_overwrite = linea_overwrite.replaceAll("\\s+", "");
                if (linea_overwrite.contains("NumerodeRegistros:")) {
                    int posicion_num = linea_overwrite.indexOf(':');
                    int num_registro;

                    //Substring para obtener el numero de registros
                    String str_numero = linea_overwrite.substring(posicion_num + 1);

                    //Cuando el numero de registros esta entre [0 ,9]
                    if (str_numero.length() == 1) {
                        num_registro = Integer.parseInt(String.valueOf(str_numero.charAt(0)));
                    } else {
                        //numero de registros es mayor a 9|  x > 9
                        num_registro = Integer.parseInt(linea_overwrite.substring(posicion_num + 1));
                    }

                    //Esta buscando el numero de registros
                    switch (opcion) {
                        case 1:
                            //Obtener numero de registro
                            temp = num_registro;
                            break;
                        case 2:
                            //Actualizar numero de registros (Decrementar)
                            num_registro--;
                            raf.seek(posicion_line);
                            raf.writeChars("Numero de Registros:" + num_registro + " \n");
                            raf.close();
                            break;
                        case 3:
                            //Esta actualizando el numero de registros (Incrementando)
                            num_registro++;
                            raf.seek(posicion_line);
                            raf.writeChars("Numero de Registros:" + num_registro + " \n");
                            raf.close();
                            break;
                    }
                }
                i++;
            }

        } catch (FileNotFoundException ex) {
        } catch (Exception ex) {
            return temp = -1;
        }

        return temp;

    }

    public void escribirArbol(ArbolB btree, String nombre_archivo_bin) {

        //Crear arbol si es la primera vez metiendo registros
        File archivo_bin_arbol = new File(nombre_archivo_bin);
        FileOutputStream fw = null;
        ObjectOutputStream bw = null;
        try {
            fw = new FileOutputStream(archivo_bin_arbol);
            bw = new ObjectOutputStream(fw);
            bw.writeObject(btree);
            bw.flush();
        } catch (Exception ex) {
        } finally {
            try {
                bw.close();
                fw.close();
            } catch (Exception ex) {
            }
        }
    }

    public ArbolB cargarArbol(String nombre_archivo_bin) {

        ArbolB btree_temp = null;

        File cargar_bin = new File(nombre_archivo_bin);

        try {
            if (cargar_bin.exists()) {
                FileInputStream entrada = new FileInputStream(cargar_bin);
                ObjectInputStream objeto = new ObjectInputStream(entrada);
                btree_temp = (ArbolB) objeto.readObject();
                objeto.close();
                entrada.close();
            }
        } catch (Exception e) {
        }
        return btree_temp;

    }
}
